// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/dask.proto

package plugins

import (
	fmt "fmt"
	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Custom Proto for Dask Plugin
type DaskJob struct {
	// Spec for the job pod
	JobPodSpec *JobPodSpec `protobuf:"bytes,1,opt,name=jobPodSpec,proto3" json:"jobPodSpec,omitempty"`
	// Cluster
	Cluster              *DaskCluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DaskJob) Reset()         { *m = DaskJob{} }
func (m *DaskJob) String() string { return proto.CompactTextString(m) }
func (*DaskJob) ProtoMessage()    {}
func (*DaskJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_d719e18eb4f4b89f, []int{0}
}

func (m *DaskJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaskJob.Unmarshal(m, b)
}
func (m *DaskJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaskJob.Marshal(b, m, deterministic)
}
func (m *DaskJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaskJob.Merge(m, src)
}
func (m *DaskJob) XXX_Size() int {
	return xxx_messageInfo_DaskJob.Size(m)
}
func (m *DaskJob) XXX_DiscardUnknown() {
	xxx_messageInfo_DaskJob.DiscardUnknown(m)
}

var xxx_messageInfo_DaskJob proto.InternalMessageInfo

func (m *DaskJob) GetJobPodSpec() *JobPodSpec {
	if m != nil {
		return m.JobPodSpec
	}
	return nil
}

func (m *DaskJob) GetCluster() *DaskCluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

// Specification for the job pod
type JobPodSpec struct {
	// Optional image to use. If unset, will use the default image.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Resources assigned to the job pod.
	Resources            *core.Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *JobPodSpec) Reset()         { *m = JobPodSpec{} }
func (m *JobPodSpec) String() string { return proto.CompactTextString(m) }
func (*JobPodSpec) ProtoMessage()    {}
func (*JobPodSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d719e18eb4f4b89f, []int{1}
}

func (m *JobPodSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobPodSpec.Unmarshal(m, b)
}
func (m *JobPodSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobPodSpec.Marshal(b, m, deterministic)
}
func (m *JobPodSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobPodSpec.Merge(m, src)
}
func (m *JobPodSpec) XXX_Size() int {
	return xxx_messageInfo_JobPodSpec.Size(m)
}
func (m *JobPodSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_JobPodSpec.DiscardUnknown(m)
}

var xxx_messageInfo_JobPodSpec proto.InternalMessageInfo

func (m *JobPodSpec) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *JobPodSpec) GetResources() *core.Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type DaskCluster struct {
	// Optional image to use for the scheduler as well as the default worker group. If unset, will use
	// the default image.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Number of workers in the default worker group
	NWorkers int32 `protobuf:"varint,2,opt,name=nWorkers,proto3" json:"nWorkers,omitempty"`
	// Resources assigned to the scheduler as well as all pods of the default worker group.
	// As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices
	// it is advised to only set limits. If requests are not explicitly set, the plugin will make
	// sure to set requests==limits.
	// The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
	Resources            *core.Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DaskCluster) Reset()         { *m = DaskCluster{} }
func (m *DaskCluster) String() string { return proto.CompactTextString(m) }
func (*DaskCluster) ProtoMessage()    {}
func (*DaskCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_d719e18eb4f4b89f, []int{2}
}

func (m *DaskCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaskCluster.Unmarshal(m, b)
}
func (m *DaskCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaskCluster.Marshal(b, m, deterministic)
}
func (m *DaskCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaskCluster.Merge(m, src)
}
func (m *DaskCluster) XXX_Size() int {
	return xxx_messageInfo_DaskCluster.Size(m)
}
func (m *DaskCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_DaskCluster.DiscardUnknown(m)
}

var xxx_messageInfo_DaskCluster proto.InternalMessageInfo

func (m *DaskCluster) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DaskCluster) GetNWorkers() int32 {
	if m != nil {
		return m.NWorkers
	}
	return 0
}

func (m *DaskCluster) GetResources() *core.Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func init() {
	proto.RegisterType((*DaskJob)(nil), "flyteidl.plugins.DaskJob")
	proto.RegisterType((*JobPodSpec)(nil), "flyteidl.plugins.JobPodSpec")
	proto.RegisterType((*DaskCluster)(nil), "flyteidl.plugins.DaskCluster")
}

func init() { proto.RegisterFile("flyteidl/plugins/dask.proto", fileDescriptor_d719e18eb4f4b89f) }

var fileDescriptor_d719e18eb4f4b89f = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xa9, 0x32, 0xe7, 0xde, 0x2e, 0x12, 0x3c, 0xd4, 0xa9, 0x20, 0x3d, 0x79, 0x31, 0x01,
	0x05, 0x87, 0xe0, 0x49, 0x3d, 0xed, 0x24, 0xf1, 0x20, 0xec, 0xd6, 0xa4, 0xcf, 0x58, 0xdb, 0xf5,
	0x95, 0x24, 0x45, 0xbc, 0xf9, 0xa7, 0xcb, 0xda, 0xb5, 0x9d, 0x15, 0x61, 0xc7, 0xf0, 0x7e, 0xdf,
	0xef, 0x23, 0x7c, 0x70, 0xfa, 0x96, 0x7f, 0x79, 0x4c, 0x93, 0x5c, 0x94, 0x79, 0x65, 0xd2, 0xc2,
	0x89, 0x24, 0x76, 0x19, 0x2f, 0x2d, 0x79, 0x62, 0x47, 0xed, 0x91, 0x6f, 0x8e, 0xb3, 0x93, 0x0e,
	0xd7, 0x64, 0x51, 0xf8, 0xd8, 0x65, 0xae, 0x81, 0xa3, 0xef, 0x00, 0xc6, 0x4f, 0xb1, 0xcb, 0x16,
	0xa4, 0xd8, 0x3d, 0xc0, 0x07, 0xa9, 0x67, 0x4a, 0x5e, 0x4a, 0xd4, 0x61, 0x70, 0x11, 0x5c, 0x4e,
	0xaf, 0xcf, 0xf8, 0xd0, 0xc6, 0x17, 0x1d, 0x23, 0xb7, 0x78, 0x36, 0x87, 0xb1, 0xce, 0x2b, 0xe7,
	0xd1, 0x86, 0x7b, 0x75, 0xf4, 0xfc, 0x6f, 0x74, 0xdd, 0xf4, 0xd8, 0x40, 0xb2, 0xa5, 0xa3, 0x25,
	0x40, 0xaf, 0x64, 0xc7, 0x30, 0x4a, 0x57, 0xb1, 0xc1, 0xba, 0x7f, 0x22, 0x9b, 0x07, 0xbb, 0x85,
	0x89, 0x45, 0x47, 0x95, 0xd5, 0xe8, 0x36, 0xfa, 0xb0, 0xd7, 0xaf, 0x7f, 0xc5, 0x65, 0x7b, 0x97,
	0x3d, 0x1a, 0x7d, 0xc2, 0x74, 0xab, 0xf3, 0x1f, 0xf9, 0x0c, 0x0e, 0x8b, 0x57, 0xb2, 0x19, 0xda,
	0xc6, 0x3d, 0x92, 0xdd, 0xfb, 0x77, 0xf1, 0xfe, 0xce, 0xc5, 0x0f, 0x77, 0xcb, 0xb9, 0x49, 0xfd,
	0x7b, 0xa5, 0xb8, 0xa6, 0x95, 0xa8, 0x03, 0x64, 0x8d, 0xe8, 0x86, 0x30, 0x58, 0x88, 0x52, 0x5d,
	0x19, 0x12, 0xc3, 0x29, 0xd5, 0x41, 0xbd, 0xcc, 0xcd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba,
	0x86, 0xdc, 0x43, 0xe5, 0x01, 0x00, 0x00,
}
