// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/dask.proto

package flyteidl.plugins;

public final class Dask {
  private Dask() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DaskJobOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.plugins.DaskJob)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Optional namespace to use for the dask pods. If none is given, the namespace of the
     * Flyte task is used
     * </pre>
     *
     * <code>string namespace = 1;</code>
     */
    java.lang.String getNamespace();
    /**
     * <pre>
     * Optional namespace to use for the dask pods. If none is given, the namespace of the
     * Flyte task is used
     * </pre>
     *
     * <code>string namespace = 1;</code>
     */
    com.google.protobuf.ByteString
        getNamespaceBytes();

    /**
     * <pre>
     * Spec for the job pod
     * </pre>
     *
     * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
     */
    boolean hasJobPodSpec();
    /**
     * <pre>
     * Spec for the job pod
     * </pre>
     *
     * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
     */
    flyteidl.plugins.Dask.JobPodSpec getJobPodSpec();
    /**
     * <pre>
     * Spec for the job pod
     * </pre>
     *
     * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
     */
    flyteidl.plugins.Dask.JobPodSpecOrBuilder getJobPodSpecOrBuilder();

    /**
     * <pre>
     * Cluster
     * </pre>
     *
     * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
     */
    boolean hasCluster();
    /**
     * <pre>
     * Cluster
     * </pre>
     *
     * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
     */
    flyteidl.plugins.Dask.DaskCluster getCluster();
    /**
     * <pre>
     * Cluster
     * </pre>
     *
     * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
     */
    flyteidl.plugins.Dask.DaskClusterOrBuilder getClusterOrBuilder();
  }
  /**
   * <pre>
   * Custom Proto for Dask Plugin
   * </pre>
   *
   * Protobuf type {@code flyteidl.plugins.DaskJob}
   */
  public  static final class DaskJob extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.plugins.DaskJob)
      DaskJobOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DaskJob.newBuilder() to construct.
    private DaskJob(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DaskJob() {
      namespace_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DaskJob(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              namespace_ = s;
              break;
            }
            case 18: {
              flyteidl.plugins.Dask.JobPodSpec.Builder subBuilder = null;
              if (jobPodSpec_ != null) {
                subBuilder = jobPodSpec_.toBuilder();
              }
              jobPodSpec_ = input.readMessage(flyteidl.plugins.Dask.JobPodSpec.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(jobPodSpec_);
                jobPodSpec_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              flyteidl.plugins.Dask.DaskCluster.Builder subBuilder = null;
              if (cluster_ != null) {
                subBuilder = cluster_.toBuilder();
              }
              cluster_ = input.readMessage(flyteidl.plugins.Dask.DaskCluster.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cluster_);
                cluster_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_DaskJob_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_DaskJob_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.plugins.Dask.DaskJob.class, flyteidl.plugins.Dask.DaskJob.Builder.class);
    }

    public static final int NAMESPACE_FIELD_NUMBER = 1;
    private volatile java.lang.Object namespace_;
    /**
     * <pre>
     * Optional namespace to use for the dask pods. If none is given, the namespace of the
     * Flyte task is used
     * </pre>
     *
     * <code>string namespace = 1;</code>
     */
    public java.lang.String getNamespace() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        namespace_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Optional namespace to use for the dask pods. If none is given, the namespace of the
     * Flyte task is used
     * </pre>
     *
     * <code>string namespace = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int JOBPODSPEC_FIELD_NUMBER = 2;
    private flyteidl.plugins.Dask.JobPodSpec jobPodSpec_;
    /**
     * <pre>
     * Spec for the job pod
     * </pre>
     *
     * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
     */
    public boolean hasJobPodSpec() {
      return jobPodSpec_ != null;
    }
    /**
     * <pre>
     * Spec for the job pod
     * </pre>
     *
     * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
     */
    public flyteidl.plugins.Dask.JobPodSpec getJobPodSpec() {
      return jobPodSpec_ == null ? flyteidl.plugins.Dask.JobPodSpec.getDefaultInstance() : jobPodSpec_;
    }
    /**
     * <pre>
     * Spec for the job pod
     * </pre>
     *
     * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
     */
    public flyteidl.plugins.Dask.JobPodSpecOrBuilder getJobPodSpecOrBuilder() {
      return getJobPodSpec();
    }

    public static final int CLUSTER_FIELD_NUMBER = 3;
    private flyteidl.plugins.Dask.DaskCluster cluster_;
    /**
     * <pre>
     * Cluster
     * </pre>
     *
     * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
     */
    public boolean hasCluster() {
      return cluster_ != null;
    }
    /**
     * <pre>
     * Cluster
     * </pre>
     *
     * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
     */
    public flyteidl.plugins.Dask.DaskCluster getCluster() {
      return cluster_ == null ? flyteidl.plugins.Dask.DaskCluster.getDefaultInstance() : cluster_;
    }
    /**
     * <pre>
     * Cluster
     * </pre>
     *
     * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
     */
    public flyteidl.plugins.Dask.DaskClusterOrBuilder getClusterOrBuilder() {
      return getCluster();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNamespaceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, namespace_);
      }
      if (jobPodSpec_ != null) {
        output.writeMessage(2, getJobPodSpec());
      }
      if (cluster_ != null) {
        output.writeMessage(3, getCluster());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNamespaceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, namespace_);
      }
      if (jobPodSpec_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getJobPodSpec());
      }
      if (cluster_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getCluster());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.plugins.Dask.DaskJob)) {
        return super.equals(obj);
      }
      flyteidl.plugins.Dask.DaskJob other = (flyteidl.plugins.Dask.DaskJob) obj;

      if (!getNamespace()
          .equals(other.getNamespace())) return false;
      if (hasJobPodSpec() != other.hasJobPodSpec()) return false;
      if (hasJobPodSpec()) {
        if (!getJobPodSpec()
            .equals(other.getJobPodSpec())) return false;
      }
      if (hasCluster() != other.hasCluster()) return false;
      if (hasCluster()) {
        if (!getCluster()
            .equals(other.getCluster())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAMESPACE_FIELD_NUMBER;
      hash = (53 * hash) + getNamespace().hashCode();
      if (hasJobPodSpec()) {
        hash = (37 * hash) + JOBPODSPEC_FIELD_NUMBER;
        hash = (53 * hash) + getJobPodSpec().hashCode();
      }
      if (hasCluster()) {
        hash = (37 * hash) + CLUSTER_FIELD_NUMBER;
        hash = (53 * hash) + getCluster().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.plugins.Dask.DaskJob parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Dask.DaskJob parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.DaskJob parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Dask.DaskJob parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.DaskJob parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Dask.DaskJob parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.DaskJob parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Dask.DaskJob parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.DaskJob parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Dask.DaskJob parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.DaskJob parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Dask.DaskJob parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.plugins.Dask.DaskJob prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Custom Proto for Dask Plugin
     * </pre>
     *
     * Protobuf type {@code flyteidl.plugins.DaskJob}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.plugins.DaskJob)
        flyteidl.plugins.Dask.DaskJobOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_DaskJob_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_DaskJob_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.plugins.Dask.DaskJob.class, flyteidl.plugins.Dask.DaskJob.Builder.class);
      }

      // Construct using flyteidl.plugins.Dask.DaskJob.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        namespace_ = "";

        if (jobPodSpecBuilder_ == null) {
          jobPodSpec_ = null;
        } else {
          jobPodSpec_ = null;
          jobPodSpecBuilder_ = null;
        }
        if (clusterBuilder_ == null) {
          cluster_ = null;
        } else {
          cluster_ = null;
          clusterBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_DaskJob_descriptor;
      }

      @java.lang.Override
      public flyteidl.plugins.Dask.DaskJob getDefaultInstanceForType() {
        return flyteidl.plugins.Dask.DaskJob.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.plugins.Dask.DaskJob build() {
        flyteidl.plugins.Dask.DaskJob result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.plugins.Dask.DaskJob buildPartial() {
        flyteidl.plugins.Dask.DaskJob result = new flyteidl.plugins.Dask.DaskJob(this);
        result.namespace_ = namespace_;
        if (jobPodSpecBuilder_ == null) {
          result.jobPodSpec_ = jobPodSpec_;
        } else {
          result.jobPodSpec_ = jobPodSpecBuilder_.build();
        }
        if (clusterBuilder_ == null) {
          result.cluster_ = cluster_;
        } else {
          result.cluster_ = clusterBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.plugins.Dask.DaskJob) {
          return mergeFrom((flyteidl.plugins.Dask.DaskJob)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.plugins.Dask.DaskJob other) {
        if (other == flyteidl.plugins.Dask.DaskJob.getDefaultInstance()) return this;
        if (!other.getNamespace().isEmpty()) {
          namespace_ = other.namespace_;
          onChanged();
        }
        if (other.hasJobPodSpec()) {
          mergeJobPodSpec(other.getJobPodSpec());
        }
        if (other.hasCluster()) {
          mergeCluster(other.getCluster());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.plugins.Dask.DaskJob parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.plugins.Dask.DaskJob) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object namespace_ = "";
      /**
       * <pre>
       * Optional namespace to use for the dask pods. If none is given, the namespace of the
       * Flyte task is used
       * </pre>
       *
       * <code>string namespace = 1;</code>
       */
      public java.lang.String getNamespace() {
        java.lang.Object ref = namespace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          namespace_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Optional namespace to use for the dask pods. If none is given, the namespace of the
       * Flyte task is used
       * </pre>
       *
       * <code>string namespace = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNamespaceBytes() {
        java.lang.Object ref = namespace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          namespace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Optional namespace to use for the dask pods. If none is given, the namespace of the
       * Flyte task is used
       * </pre>
       *
       * <code>string namespace = 1;</code>
       */
      public Builder setNamespace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        namespace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional namespace to use for the dask pods. If none is given, the namespace of the
       * Flyte task is used
       * </pre>
       *
       * <code>string namespace = 1;</code>
       */
      public Builder clearNamespace() {
        
        namespace_ = getDefaultInstance().getNamespace();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional namespace to use for the dask pods. If none is given, the namespace of the
       * Flyte task is used
       * </pre>
       *
       * <code>string namespace = 1;</code>
       */
      public Builder setNamespaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        namespace_ = value;
        onChanged();
        return this;
      }

      private flyteidl.plugins.Dask.JobPodSpec jobPodSpec_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.plugins.Dask.JobPodSpec, flyteidl.plugins.Dask.JobPodSpec.Builder, flyteidl.plugins.Dask.JobPodSpecOrBuilder> jobPodSpecBuilder_;
      /**
       * <pre>
       * Spec for the job pod
       * </pre>
       *
       * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
       */
      public boolean hasJobPodSpec() {
        return jobPodSpecBuilder_ != null || jobPodSpec_ != null;
      }
      /**
       * <pre>
       * Spec for the job pod
       * </pre>
       *
       * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
       */
      public flyteidl.plugins.Dask.JobPodSpec getJobPodSpec() {
        if (jobPodSpecBuilder_ == null) {
          return jobPodSpec_ == null ? flyteidl.plugins.Dask.JobPodSpec.getDefaultInstance() : jobPodSpec_;
        } else {
          return jobPodSpecBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Spec for the job pod
       * </pre>
       *
       * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
       */
      public Builder setJobPodSpec(flyteidl.plugins.Dask.JobPodSpec value) {
        if (jobPodSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          jobPodSpec_ = value;
          onChanged();
        } else {
          jobPodSpecBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Spec for the job pod
       * </pre>
       *
       * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
       */
      public Builder setJobPodSpec(
          flyteidl.plugins.Dask.JobPodSpec.Builder builderForValue) {
        if (jobPodSpecBuilder_ == null) {
          jobPodSpec_ = builderForValue.build();
          onChanged();
        } else {
          jobPodSpecBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Spec for the job pod
       * </pre>
       *
       * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
       */
      public Builder mergeJobPodSpec(flyteidl.plugins.Dask.JobPodSpec value) {
        if (jobPodSpecBuilder_ == null) {
          if (jobPodSpec_ != null) {
            jobPodSpec_ =
              flyteidl.plugins.Dask.JobPodSpec.newBuilder(jobPodSpec_).mergeFrom(value).buildPartial();
          } else {
            jobPodSpec_ = value;
          }
          onChanged();
        } else {
          jobPodSpecBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Spec for the job pod
       * </pre>
       *
       * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
       */
      public Builder clearJobPodSpec() {
        if (jobPodSpecBuilder_ == null) {
          jobPodSpec_ = null;
          onChanged();
        } else {
          jobPodSpec_ = null;
          jobPodSpecBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Spec for the job pod
       * </pre>
       *
       * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
       */
      public flyteidl.plugins.Dask.JobPodSpec.Builder getJobPodSpecBuilder() {
        
        onChanged();
        return getJobPodSpecFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Spec for the job pod
       * </pre>
       *
       * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
       */
      public flyteidl.plugins.Dask.JobPodSpecOrBuilder getJobPodSpecOrBuilder() {
        if (jobPodSpecBuilder_ != null) {
          return jobPodSpecBuilder_.getMessageOrBuilder();
        } else {
          return jobPodSpec_ == null ?
              flyteidl.plugins.Dask.JobPodSpec.getDefaultInstance() : jobPodSpec_;
        }
      }
      /**
       * <pre>
       * Spec for the job pod
       * </pre>
       *
       * <code>.flyteidl.plugins.JobPodSpec jobPodSpec = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.plugins.Dask.JobPodSpec, flyteidl.plugins.Dask.JobPodSpec.Builder, flyteidl.plugins.Dask.JobPodSpecOrBuilder> 
          getJobPodSpecFieldBuilder() {
        if (jobPodSpecBuilder_ == null) {
          jobPodSpecBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.plugins.Dask.JobPodSpec, flyteidl.plugins.Dask.JobPodSpec.Builder, flyteidl.plugins.Dask.JobPodSpecOrBuilder>(
                  getJobPodSpec(),
                  getParentForChildren(),
                  isClean());
          jobPodSpec_ = null;
        }
        return jobPodSpecBuilder_;
      }

      private flyteidl.plugins.Dask.DaskCluster cluster_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.plugins.Dask.DaskCluster, flyteidl.plugins.Dask.DaskCluster.Builder, flyteidl.plugins.Dask.DaskClusterOrBuilder> clusterBuilder_;
      /**
       * <pre>
       * Cluster
       * </pre>
       *
       * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
       */
      public boolean hasCluster() {
        return clusterBuilder_ != null || cluster_ != null;
      }
      /**
       * <pre>
       * Cluster
       * </pre>
       *
       * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
       */
      public flyteidl.plugins.Dask.DaskCluster getCluster() {
        if (clusterBuilder_ == null) {
          return cluster_ == null ? flyteidl.plugins.Dask.DaskCluster.getDefaultInstance() : cluster_;
        } else {
          return clusterBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Cluster
       * </pre>
       *
       * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
       */
      public Builder setCluster(flyteidl.plugins.Dask.DaskCluster value) {
        if (clusterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cluster_ = value;
          onChanged();
        } else {
          clusterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Cluster
       * </pre>
       *
       * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
       */
      public Builder setCluster(
          flyteidl.plugins.Dask.DaskCluster.Builder builderForValue) {
        if (clusterBuilder_ == null) {
          cluster_ = builderForValue.build();
          onChanged();
        } else {
          clusterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Cluster
       * </pre>
       *
       * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
       */
      public Builder mergeCluster(flyteidl.plugins.Dask.DaskCluster value) {
        if (clusterBuilder_ == null) {
          if (cluster_ != null) {
            cluster_ =
              flyteidl.plugins.Dask.DaskCluster.newBuilder(cluster_).mergeFrom(value).buildPartial();
          } else {
            cluster_ = value;
          }
          onChanged();
        } else {
          clusterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Cluster
       * </pre>
       *
       * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
       */
      public Builder clearCluster() {
        if (clusterBuilder_ == null) {
          cluster_ = null;
          onChanged();
        } else {
          cluster_ = null;
          clusterBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Cluster
       * </pre>
       *
       * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
       */
      public flyteidl.plugins.Dask.DaskCluster.Builder getClusterBuilder() {
        
        onChanged();
        return getClusterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Cluster
       * </pre>
       *
       * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
       */
      public flyteidl.plugins.Dask.DaskClusterOrBuilder getClusterOrBuilder() {
        if (clusterBuilder_ != null) {
          return clusterBuilder_.getMessageOrBuilder();
        } else {
          return cluster_ == null ?
              flyteidl.plugins.Dask.DaskCluster.getDefaultInstance() : cluster_;
        }
      }
      /**
       * <pre>
       * Cluster
       * </pre>
       *
       * <code>.flyteidl.plugins.DaskCluster cluster = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.plugins.Dask.DaskCluster, flyteidl.plugins.Dask.DaskCluster.Builder, flyteidl.plugins.Dask.DaskClusterOrBuilder> 
          getClusterFieldBuilder() {
        if (clusterBuilder_ == null) {
          clusterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.plugins.Dask.DaskCluster, flyteidl.plugins.Dask.DaskCluster.Builder, flyteidl.plugins.Dask.DaskClusterOrBuilder>(
                  getCluster(),
                  getParentForChildren(),
                  isClean());
          cluster_ = null;
        }
        return clusterBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.plugins.DaskJob)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.plugins.DaskJob)
    private static final flyteidl.plugins.Dask.DaskJob DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.plugins.Dask.DaskJob();
    }

    public static flyteidl.plugins.Dask.DaskJob getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DaskJob>
        PARSER = new com.google.protobuf.AbstractParser<DaskJob>() {
      @java.lang.Override
      public DaskJob parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DaskJob(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DaskJob> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DaskJob> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.plugins.Dask.DaskJob getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface JobPodSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.plugins.JobPodSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Optional image to use. If unset, will use the default image.
     * </pre>
     *
     * <code>string image = 1;</code>
     */
    java.lang.String getImage();
    /**
     * <pre>
     * Optional image to use. If unset, will use the default image.
     * </pre>
     *
     * <code>string image = 1;</code>
     */
    com.google.protobuf.ByteString
        getImageBytes();

    /**
     * <pre>
     * Resources assigned to the job pod.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 2;</code>
     */
    boolean hasResources();
    /**
     * <pre>
     * Resources assigned to the job pod.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 2;</code>
     */
    flyteidl.core.Tasks.Resources getResources();
    /**
     * <pre>
     * Resources assigned to the job pod.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 2;</code>
     */
    flyteidl.core.Tasks.ResourcesOrBuilder getResourcesOrBuilder();
  }
  /**
   * <pre>
   * Specification for the job pod
   * </pre>
   *
   * Protobuf type {@code flyteidl.plugins.JobPodSpec}
   */
  public  static final class JobPodSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.plugins.JobPodSpec)
      JobPodSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use JobPodSpec.newBuilder() to construct.
    private JobPodSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private JobPodSpec() {
      image_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private JobPodSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              image_ = s;
              break;
            }
            case 18: {
              flyteidl.core.Tasks.Resources.Builder subBuilder = null;
              if (resources_ != null) {
                subBuilder = resources_.toBuilder();
              }
              resources_ = input.readMessage(flyteidl.core.Tasks.Resources.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(resources_);
                resources_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_JobPodSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_JobPodSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.plugins.Dask.JobPodSpec.class, flyteidl.plugins.Dask.JobPodSpec.Builder.class);
    }

    public static final int IMAGE_FIELD_NUMBER = 1;
    private volatile java.lang.Object image_;
    /**
     * <pre>
     * Optional image to use. If unset, will use the default image.
     * </pre>
     *
     * <code>string image = 1;</code>
     */
    public java.lang.String getImage() {
      java.lang.Object ref = image_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        image_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Optional image to use. If unset, will use the default image.
     * </pre>
     *
     * <code>string image = 1;</code>
     */
    public com.google.protobuf.ByteString
        getImageBytes() {
      java.lang.Object ref = image_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        image_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RESOURCES_FIELD_NUMBER = 2;
    private flyteidl.core.Tasks.Resources resources_;
    /**
     * <pre>
     * Resources assigned to the job pod.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 2;</code>
     */
    public boolean hasResources() {
      return resources_ != null;
    }
    /**
     * <pre>
     * Resources assigned to the job pod.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 2;</code>
     */
    public flyteidl.core.Tasks.Resources getResources() {
      return resources_ == null ? flyteidl.core.Tasks.Resources.getDefaultInstance() : resources_;
    }
    /**
     * <pre>
     * Resources assigned to the job pod.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 2;</code>
     */
    public flyteidl.core.Tasks.ResourcesOrBuilder getResourcesOrBuilder() {
      return getResources();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getImageBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, image_);
      }
      if (resources_ != null) {
        output.writeMessage(2, getResources());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getImageBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, image_);
      }
      if (resources_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getResources());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.plugins.Dask.JobPodSpec)) {
        return super.equals(obj);
      }
      flyteidl.plugins.Dask.JobPodSpec other = (flyteidl.plugins.Dask.JobPodSpec) obj;

      if (!getImage()
          .equals(other.getImage())) return false;
      if (hasResources() != other.hasResources()) return false;
      if (hasResources()) {
        if (!getResources()
            .equals(other.getResources())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + IMAGE_FIELD_NUMBER;
      hash = (53 * hash) + getImage().hashCode();
      if (hasResources()) {
        hash = (37 * hash) + RESOURCES_FIELD_NUMBER;
        hash = (53 * hash) + getResources().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.plugins.Dask.JobPodSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Dask.JobPodSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.plugins.Dask.JobPodSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specification for the job pod
     * </pre>
     *
     * Protobuf type {@code flyteidl.plugins.JobPodSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.plugins.JobPodSpec)
        flyteidl.plugins.Dask.JobPodSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_JobPodSpec_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_JobPodSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.plugins.Dask.JobPodSpec.class, flyteidl.plugins.Dask.JobPodSpec.Builder.class);
      }

      // Construct using flyteidl.plugins.Dask.JobPodSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        image_ = "";

        if (resourcesBuilder_ == null) {
          resources_ = null;
        } else {
          resources_ = null;
          resourcesBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_JobPodSpec_descriptor;
      }

      @java.lang.Override
      public flyteidl.plugins.Dask.JobPodSpec getDefaultInstanceForType() {
        return flyteidl.plugins.Dask.JobPodSpec.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.plugins.Dask.JobPodSpec build() {
        flyteidl.plugins.Dask.JobPodSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.plugins.Dask.JobPodSpec buildPartial() {
        flyteidl.plugins.Dask.JobPodSpec result = new flyteidl.plugins.Dask.JobPodSpec(this);
        result.image_ = image_;
        if (resourcesBuilder_ == null) {
          result.resources_ = resources_;
        } else {
          result.resources_ = resourcesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.plugins.Dask.JobPodSpec) {
          return mergeFrom((flyteidl.plugins.Dask.JobPodSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.plugins.Dask.JobPodSpec other) {
        if (other == flyteidl.plugins.Dask.JobPodSpec.getDefaultInstance()) return this;
        if (!other.getImage().isEmpty()) {
          image_ = other.image_;
          onChanged();
        }
        if (other.hasResources()) {
          mergeResources(other.getResources());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.plugins.Dask.JobPodSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.plugins.Dask.JobPodSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object image_ = "";
      /**
       * <pre>
       * Optional image to use. If unset, will use the default image.
       * </pre>
       *
       * <code>string image = 1;</code>
       */
      public java.lang.String getImage() {
        java.lang.Object ref = image_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          image_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Optional image to use. If unset, will use the default image.
       * </pre>
       *
       * <code>string image = 1;</code>
       */
      public com.google.protobuf.ByteString
          getImageBytes() {
        java.lang.Object ref = image_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          image_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Optional image to use. If unset, will use the default image.
       * </pre>
       *
       * <code>string image = 1;</code>
       */
      public Builder setImage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        image_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional image to use. If unset, will use the default image.
       * </pre>
       *
       * <code>string image = 1;</code>
       */
      public Builder clearImage() {
        
        image_ = getDefaultInstance().getImage();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional image to use. If unset, will use the default image.
       * </pre>
       *
       * <code>string image = 1;</code>
       */
      public Builder setImageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        image_ = value;
        onChanged();
        return this;
      }

      private flyteidl.core.Tasks.Resources resources_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Tasks.Resources, flyteidl.core.Tasks.Resources.Builder, flyteidl.core.Tasks.ResourcesOrBuilder> resourcesBuilder_;
      /**
       * <pre>
       * Resources assigned to the job pod.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 2;</code>
       */
      public boolean hasResources() {
        return resourcesBuilder_ != null || resources_ != null;
      }
      /**
       * <pre>
       * Resources assigned to the job pod.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 2;</code>
       */
      public flyteidl.core.Tasks.Resources getResources() {
        if (resourcesBuilder_ == null) {
          return resources_ == null ? flyteidl.core.Tasks.Resources.getDefaultInstance() : resources_;
        } else {
          return resourcesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Resources assigned to the job pod.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 2;</code>
       */
      public Builder setResources(flyteidl.core.Tasks.Resources value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          resources_ = value;
          onChanged();
        } else {
          resourcesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Resources assigned to the job pod.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 2;</code>
       */
      public Builder setResources(
          flyteidl.core.Tasks.Resources.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          resources_ = builderForValue.build();
          onChanged();
        } else {
          resourcesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Resources assigned to the job pod.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 2;</code>
       */
      public Builder mergeResources(flyteidl.core.Tasks.Resources value) {
        if (resourcesBuilder_ == null) {
          if (resources_ != null) {
            resources_ =
              flyteidl.core.Tasks.Resources.newBuilder(resources_).mergeFrom(value).buildPartial();
          } else {
            resources_ = value;
          }
          onChanged();
        } else {
          resourcesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Resources assigned to the job pod.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 2;</code>
       */
      public Builder clearResources() {
        if (resourcesBuilder_ == null) {
          resources_ = null;
          onChanged();
        } else {
          resources_ = null;
          resourcesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Resources assigned to the job pod.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 2;</code>
       */
      public flyteidl.core.Tasks.Resources.Builder getResourcesBuilder() {
        
        onChanged();
        return getResourcesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Resources assigned to the job pod.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 2;</code>
       */
      public flyteidl.core.Tasks.ResourcesOrBuilder getResourcesOrBuilder() {
        if (resourcesBuilder_ != null) {
          return resourcesBuilder_.getMessageOrBuilder();
        } else {
          return resources_ == null ?
              flyteidl.core.Tasks.Resources.getDefaultInstance() : resources_;
        }
      }
      /**
       * <pre>
       * Resources assigned to the job pod.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Tasks.Resources, flyteidl.core.Tasks.Resources.Builder, flyteidl.core.Tasks.ResourcesOrBuilder> 
          getResourcesFieldBuilder() {
        if (resourcesBuilder_ == null) {
          resourcesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Tasks.Resources, flyteidl.core.Tasks.Resources.Builder, flyteidl.core.Tasks.ResourcesOrBuilder>(
                  getResources(),
                  getParentForChildren(),
                  isClean());
          resources_ = null;
        }
        return resourcesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.plugins.JobPodSpec)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.plugins.JobPodSpec)
    private static final flyteidl.plugins.Dask.JobPodSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.plugins.Dask.JobPodSpec();
    }

    public static flyteidl.plugins.Dask.JobPodSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<JobPodSpec>
        PARSER = new com.google.protobuf.AbstractParser<JobPodSpec>() {
      @java.lang.Override
      public JobPodSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JobPodSpec(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<JobPodSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<JobPodSpec> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.plugins.Dask.JobPodSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DaskClusterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.plugins.DaskCluster)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Optional image to use for the scheduler as well as the default worker group. If unset, will use 
     * the default image.
     * </pre>
     *
     * <code>string image = 1;</code>
     */
    java.lang.String getImage();
    /**
     * <pre>
     * Optional image to use for the scheduler as well as the default worker group. If unset, will use 
     * the default image.
     * </pre>
     *
     * <code>string image = 1;</code>
     */
    com.google.protobuf.ByteString
        getImageBytes();

    /**
     * <pre>
     * Number of workers in the default worker group
     * </pre>
     *
     * <code>int32 nWorkers = 2;</code>
     */
    int getNWorkers();

    /**
     * <pre>
     * Resources assigned to the scheduler as well as all pods of the default worker group.
     * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
     * it is advised to only set limits. If requests are not explicitly set, the plugin will make
     * sure to set requests==limits.
     * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 3;</code>
     */
    boolean hasResources();
    /**
     * <pre>
     * Resources assigned to the scheduler as well as all pods of the default worker group.
     * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
     * it is advised to only set limits. If requests are not explicitly set, the plugin will make
     * sure to set requests==limits.
     * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 3;</code>
     */
    flyteidl.core.Tasks.Resources getResources();
    /**
     * <pre>
     * Resources assigned to the scheduler as well as all pods of the default worker group.
     * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
     * it is advised to only set limits. If requests are not explicitly set, the plugin will make
     * sure to set requests==limits.
     * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 3;</code>
     */
    flyteidl.core.Tasks.ResourcesOrBuilder getResourcesOrBuilder();
  }
  /**
   * Protobuf type {@code flyteidl.plugins.DaskCluster}
   */
  public  static final class DaskCluster extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.plugins.DaskCluster)
      DaskClusterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DaskCluster.newBuilder() to construct.
    private DaskCluster(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DaskCluster() {
      image_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DaskCluster(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              image_ = s;
              break;
            }
            case 16: {

              nWorkers_ = input.readInt32();
              break;
            }
            case 26: {
              flyteidl.core.Tasks.Resources.Builder subBuilder = null;
              if (resources_ != null) {
                subBuilder = resources_.toBuilder();
              }
              resources_ = input.readMessage(flyteidl.core.Tasks.Resources.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(resources_);
                resources_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_DaskCluster_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_DaskCluster_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.plugins.Dask.DaskCluster.class, flyteidl.plugins.Dask.DaskCluster.Builder.class);
    }

    public static final int IMAGE_FIELD_NUMBER = 1;
    private volatile java.lang.Object image_;
    /**
     * <pre>
     * Optional image to use for the scheduler as well as the default worker group. If unset, will use 
     * the default image.
     * </pre>
     *
     * <code>string image = 1;</code>
     */
    public java.lang.String getImage() {
      java.lang.Object ref = image_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        image_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Optional image to use for the scheduler as well as the default worker group. If unset, will use 
     * the default image.
     * </pre>
     *
     * <code>string image = 1;</code>
     */
    public com.google.protobuf.ByteString
        getImageBytes() {
      java.lang.Object ref = image_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        image_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NWORKERS_FIELD_NUMBER = 2;
    private int nWorkers_;
    /**
     * <pre>
     * Number of workers in the default worker group
     * </pre>
     *
     * <code>int32 nWorkers = 2;</code>
     */
    public int getNWorkers() {
      return nWorkers_;
    }

    public static final int RESOURCES_FIELD_NUMBER = 3;
    private flyteidl.core.Tasks.Resources resources_;
    /**
     * <pre>
     * Resources assigned to the scheduler as well as all pods of the default worker group.
     * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
     * it is advised to only set limits. If requests are not explicitly set, the plugin will make
     * sure to set requests==limits.
     * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 3;</code>
     */
    public boolean hasResources() {
      return resources_ != null;
    }
    /**
     * <pre>
     * Resources assigned to the scheduler as well as all pods of the default worker group.
     * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
     * it is advised to only set limits. If requests are not explicitly set, the plugin will make
     * sure to set requests==limits.
     * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 3;</code>
     */
    public flyteidl.core.Tasks.Resources getResources() {
      return resources_ == null ? flyteidl.core.Tasks.Resources.getDefaultInstance() : resources_;
    }
    /**
     * <pre>
     * Resources assigned to the scheduler as well as all pods of the default worker group.
     * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
     * it is advised to only set limits. If requests are not explicitly set, the plugin will make
     * sure to set requests==limits.
     * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 3;</code>
     */
    public flyteidl.core.Tasks.ResourcesOrBuilder getResourcesOrBuilder() {
      return getResources();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getImageBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, image_);
      }
      if (nWorkers_ != 0) {
        output.writeInt32(2, nWorkers_);
      }
      if (resources_ != null) {
        output.writeMessage(3, getResources());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getImageBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, image_);
      }
      if (nWorkers_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, nWorkers_);
      }
      if (resources_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getResources());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.plugins.Dask.DaskCluster)) {
        return super.equals(obj);
      }
      flyteidl.plugins.Dask.DaskCluster other = (flyteidl.plugins.Dask.DaskCluster) obj;

      if (!getImage()
          .equals(other.getImage())) return false;
      if (getNWorkers()
          != other.getNWorkers()) return false;
      if (hasResources() != other.hasResources()) return false;
      if (hasResources()) {
        if (!getResources()
            .equals(other.getResources())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + IMAGE_FIELD_NUMBER;
      hash = (53 * hash) + getImage().hashCode();
      hash = (37 * hash) + NWORKERS_FIELD_NUMBER;
      hash = (53 * hash) + getNWorkers();
      if (hasResources()) {
        hash = (37 * hash) + RESOURCES_FIELD_NUMBER;
        hash = (53 * hash) + getResources().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.plugins.Dask.DaskCluster parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Dask.DaskCluster parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.plugins.Dask.DaskCluster prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code flyteidl.plugins.DaskCluster}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.plugins.DaskCluster)
        flyteidl.plugins.Dask.DaskClusterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_DaskCluster_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_DaskCluster_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.plugins.Dask.DaskCluster.class, flyteidl.plugins.Dask.DaskCluster.Builder.class);
      }

      // Construct using flyteidl.plugins.Dask.DaskCluster.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        image_ = "";

        nWorkers_ = 0;

        if (resourcesBuilder_ == null) {
          resources_ = null;
        } else {
          resources_ = null;
          resourcesBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.plugins.Dask.internal_static_flyteidl_plugins_DaskCluster_descriptor;
      }

      @java.lang.Override
      public flyteidl.plugins.Dask.DaskCluster getDefaultInstanceForType() {
        return flyteidl.plugins.Dask.DaskCluster.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.plugins.Dask.DaskCluster build() {
        flyteidl.plugins.Dask.DaskCluster result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.plugins.Dask.DaskCluster buildPartial() {
        flyteidl.plugins.Dask.DaskCluster result = new flyteidl.plugins.Dask.DaskCluster(this);
        result.image_ = image_;
        result.nWorkers_ = nWorkers_;
        if (resourcesBuilder_ == null) {
          result.resources_ = resources_;
        } else {
          result.resources_ = resourcesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.plugins.Dask.DaskCluster) {
          return mergeFrom((flyteidl.plugins.Dask.DaskCluster)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.plugins.Dask.DaskCluster other) {
        if (other == flyteidl.plugins.Dask.DaskCluster.getDefaultInstance()) return this;
        if (!other.getImage().isEmpty()) {
          image_ = other.image_;
          onChanged();
        }
        if (other.getNWorkers() != 0) {
          setNWorkers(other.getNWorkers());
        }
        if (other.hasResources()) {
          mergeResources(other.getResources());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.plugins.Dask.DaskCluster parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.plugins.Dask.DaskCluster) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object image_ = "";
      /**
       * <pre>
       * Optional image to use for the scheduler as well as the default worker group. If unset, will use 
       * the default image.
       * </pre>
       *
       * <code>string image = 1;</code>
       */
      public java.lang.String getImage() {
        java.lang.Object ref = image_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          image_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Optional image to use for the scheduler as well as the default worker group. If unset, will use 
       * the default image.
       * </pre>
       *
       * <code>string image = 1;</code>
       */
      public com.google.protobuf.ByteString
          getImageBytes() {
        java.lang.Object ref = image_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          image_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Optional image to use for the scheduler as well as the default worker group. If unset, will use 
       * the default image.
       * </pre>
       *
       * <code>string image = 1;</code>
       */
      public Builder setImage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        image_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional image to use for the scheduler as well as the default worker group. If unset, will use 
       * the default image.
       * </pre>
       *
       * <code>string image = 1;</code>
       */
      public Builder clearImage() {
        
        image_ = getDefaultInstance().getImage();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional image to use for the scheduler as well as the default worker group. If unset, will use 
       * the default image.
       * </pre>
       *
       * <code>string image = 1;</code>
       */
      public Builder setImageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        image_ = value;
        onChanged();
        return this;
      }

      private int nWorkers_ ;
      /**
       * <pre>
       * Number of workers in the default worker group
       * </pre>
       *
       * <code>int32 nWorkers = 2;</code>
       */
      public int getNWorkers() {
        return nWorkers_;
      }
      /**
       * <pre>
       * Number of workers in the default worker group
       * </pre>
       *
       * <code>int32 nWorkers = 2;</code>
       */
      public Builder setNWorkers(int value) {
        
        nWorkers_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of workers in the default worker group
       * </pre>
       *
       * <code>int32 nWorkers = 2;</code>
       */
      public Builder clearNWorkers() {
        
        nWorkers_ = 0;
        onChanged();
        return this;
      }

      private flyteidl.core.Tasks.Resources resources_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Tasks.Resources, flyteidl.core.Tasks.Resources.Builder, flyteidl.core.Tasks.ResourcesOrBuilder> resourcesBuilder_;
      /**
       * <pre>
       * Resources assigned to the scheduler as well as all pods of the default worker group.
       * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
       * it is advised to only set limits. If requests are not explicitly set, the plugin will make
       * sure to set requests==limits.
       * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 3;</code>
       */
      public boolean hasResources() {
        return resourcesBuilder_ != null || resources_ != null;
      }
      /**
       * <pre>
       * Resources assigned to the scheduler as well as all pods of the default worker group.
       * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
       * it is advised to only set limits. If requests are not explicitly set, the plugin will make
       * sure to set requests==limits.
       * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 3;</code>
       */
      public flyteidl.core.Tasks.Resources getResources() {
        if (resourcesBuilder_ == null) {
          return resources_ == null ? flyteidl.core.Tasks.Resources.getDefaultInstance() : resources_;
        } else {
          return resourcesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Resources assigned to the scheduler as well as all pods of the default worker group.
       * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
       * it is advised to only set limits. If requests are not explicitly set, the plugin will make
       * sure to set requests==limits.
       * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 3;</code>
       */
      public Builder setResources(flyteidl.core.Tasks.Resources value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          resources_ = value;
          onChanged();
        } else {
          resourcesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Resources assigned to the scheduler as well as all pods of the default worker group.
       * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
       * it is advised to only set limits. If requests are not explicitly set, the plugin will make
       * sure to set requests==limits.
       * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 3;</code>
       */
      public Builder setResources(
          flyteidl.core.Tasks.Resources.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          resources_ = builderForValue.build();
          onChanged();
        } else {
          resourcesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Resources assigned to the scheduler as well as all pods of the default worker group.
       * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
       * it is advised to only set limits. If requests are not explicitly set, the plugin will make
       * sure to set requests==limits.
       * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 3;</code>
       */
      public Builder mergeResources(flyteidl.core.Tasks.Resources value) {
        if (resourcesBuilder_ == null) {
          if (resources_ != null) {
            resources_ =
              flyteidl.core.Tasks.Resources.newBuilder(resources_).mergeFrom(value).buildPartial();
          } else {
            resources_ = value;
          }
          onChanged();
        } else {
          resourcesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Resources assigned to the scheduler as well as all pods of the default worker group.
       * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
       * it is advised to only set limits. If requests are not explicitly set, the plugin will make
       * sure to set requests==limits.
       * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 3;</code>
       */
      public Builder clearResources() {
        if (resourcesBuilder_ == null) {
          resources_ = null;
          onChanged();
        } else {
          resources_ = null;
          resourcesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Resources assigned to the scheduler as well as all pods of the default worker group.
       * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
       * it is advised to only set limits. If requests are not explicitly set, the plugin will make
       * sure to set requests==limits.
       * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 3;</code>
       */
      public flyteidl.core.Tasks.Resources.Builder getResourcesBuilder() {
        
        onChanged();
        return getResourcesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Resources assigned to the scheduler as well as all pods of the default worker group.
       * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
       * it is advised to only set limits. If requests are not explicitly set, the plugin will make
       * sure to set requests==limits.
       * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 3;</code>
       */
      public flyteidl.core.Tasks.ResourcesOrBuilder getResourcesOrBuilder() {
        if (resourcesBuilder_ != null) {
          return resourcesBuilder_.getMessageOrBuilder();
        } else {
          return resources_ == null ?
              flyteidl.core.Tasks.Resources.getDefaultInstance() : resources_;
        }
      }
      /**
       * <pre>
       * Resources assigned to the scheduler as well as all pods of the default worker group.
       * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
       * it is advised to only set limits. If requests are not explicitly set, the plugin will make
       * sure to set requests==limits.
       * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Tasks.Resources, flyteidl.core.Tasks.Resources.Builder, flyteidl.core.Tasks.ResourcesOrBuilder> 
          getResourcesFieldBuilder() {
        if (resourcesBuilder_ == null) {
          resourcesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Tasks.Resources, flyteidl.core.Tasks.Resources.Builder, flyteidl.core.Tasks.ResourcesOrBuilder>(
                  getResources(),
                  getParentForChildren(),
                  isClean());
          resources_ = null;
        }
        return resourcesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.plugins.DaskCluster)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.plugins.DaskCluster)
    private static final flyteidl.plugins.Dask.DaskCluster DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.plugins.Dask.DaskCluster();
    }

    public static flyteidl.plugins.Dask.DaskCluster getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DaskCluster>
        PARSER = new com.google.protobuf.AbstractParser<DaskCluster>() {
      @java.lang.Override
      public DaskCluster parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DaskCluster(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DaskCluster> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DaskCluster> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.plugins.Dask.DaskCluster getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_plugins_DaskJob_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_plugins_DaskJob_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_plugins_JobPodSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_plugins_JobPodSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_plugins_DaskCluster_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_plugins_DaskCluster_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033flyteidl/plugins/dask.proto\022\020flyteidl." +
      "plugins\032\031flyteidl/core/tasks.proto\"~\n\007Da" +
      "skJob\022\021\n\tnamespace\030\001 \001(\t\0220\n\njobPodSpec\030\002" +
      " \001(\0132\034.flyteidl.plugins.JobPodSpec\022.\n\007cl" +
      "uster\030\003 \001(\0132\035.flyteidl.plugins.DaskClust" +
      "er\"H\n\nJobPodSpec\022\r\n\005image\030\001 \001(\t\022+\n\tresou" +
      "rces\030\002 \001(\0132\030.flyteidl.core.Resources\"[\n\013" +
      "DaskCluster\022\r\n\005image\030\001 \001(\t\022\020\n\010nWorkers\030\002" +
      " \001(\005\022+\n\tresources\030\003 \001(\0132\030.flyteidl.core." +
      "ResourcesB9Z7github.com/flyteorg/flyteid" +
      "l/gen/pb-go/flyteidl/pluginsb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          flyteidl.core.Tasks.getDescriptor(),
        }, assigner);
    internal_static_flyteidl_plugins_DaskJob_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_flyteidl_plugins_DaskJob_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_plugins_DaskJob_descriptor,
        new java.lang.String[] { "Namespace", "JobPodSpec", "Cluster", });
    internal_static_flyteidl_plugins_JobPodSpec_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_flyteidl_plugins_JobPodSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_plugins_JobPodSpec_descriptor,
        new java.lang.String[] { "Image", "Resources", });
    internal_static_flyteidl_plugins_DaskCluster_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_flyteidl_plugins_DaskCluster_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_plugins_DaskCluster_descriptor,
        new java.lang.String[] { "Image", "NWorkers", "Resources", });
    flyteidl.core.Tasks.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
