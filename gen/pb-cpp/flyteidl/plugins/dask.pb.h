// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/dask.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fplugins_2fdask_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fplugins_2fdask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/tasks.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fdask_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fdask_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fplugins_2fdask_2eproto();
namespace flyteidl {
namespace plugins {
class DaskCluster;
class DaskClusterDefaultTypeInternal;
extern DaskClusterDefaultTypeInternal _DaskCluster_default_instance_;
class DaskJob;
class DaskJobDefaultTypeInternal;
extern DaskJobDefaultTypeInternal _DaskJob_default_instance_;
class JobPodSpec;
class JobPodSpecDefaultTypeInternal;
extern JobPodSpecDefaultTypeInternal _JobPodSpec_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::plugins::DaskCluster* Arena::CreateMaybeMessage<::flyteidl::plugins::DaskCluster>(Arena*);
template<> ::flyteidl::plugins::DaskJob* Arena::CreateMaybeMessage<::flyteidl::plugins::DaskJob>(Arena*);
template<> ::flyteidl::plugins::JobPodSpec* Arena::CreateMaybeMessage<::flyteidl::plugins::JobPodSpec>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace plugins {

// ===================================================================

class DaskJob final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.DaskJob) */ {
 public:
  DaskJob();
  virtual ~DaskJob();

  DaskJob(const DaskJob& from);

  inline DaskJob& operator=(const DaskJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DaskJob(DaskJob&& from) noexcept
    : DaskJob() {
    *this = ::std::move(from);
  }

  inline DaskJob& operator=(DaskJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DaskJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DaskJob* internal_default_instance() {
    return reinterpret_cast<const DaskJob*>(
               &_DaskJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DaskJob* other);
  friend void swap(DaskJob& a, DaskJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DaskJob* New() const final {
    return CreateMaybeMessage<DaskJob>(nullptr);
  }

  DaskJob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DaskJob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DaskJob& from);
  void MergeFrom(const DaskJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaskJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.plugins.JobPodSpec jobPodSpec = 1;
  bool has_jobpodspec() const;
  void clear_jobpodspec();
  static const int kJobPodSpecFieldNumber = 1;
  const ::flyteidl::plugins::JobPodSpec& jobpodspec() const;
  ::flyteidl::plugins::JobPodSpec* release_jobpodspec();
  ::flyteidl::plugins::JobPodSpec* mutable_jobpodspec();
  void set_allocated_jobpodspec(::flyteidl::plugins::JobPodSpec* jobpodspec);

  // .flyteidl.plugins.DaskCluster cluster = 2;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 2;
  const ::flyteidl::plugins::DaskCluster& cluster() const;
  ::flyteidl::plugins::DaskCluster* release_cluster();
  ::flyteidl::plugins::DaskCluster* mutable_cluster();
  void set_allocated_cluster(::flyteidl::plugins::DaskCluster* cluster);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.DaskJob)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::plugins::JobPodSpec* jobpodspec_;
  ::flyteidl::plugins::DaskCluster* cluster_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fdask_2eproto;
};
// -------------------------------------------------------------------

class JobPodSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.JobPodSpec) */ {
 public:
  JobPodSpec();
  virtual ~JobPodSpec();

  JobPodSpec(const JobPodSpec& from);

  inline JobPodSpec& operator=(const JobPodSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobPodSpec(JobPodSpec&& from) noexcept
    : JobPodSpec() {
    *this = ::std::move(from);
  }

  inline JobPodSpec& operator=(JobPodSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const JobPodSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobPodSpec* internal_default_instance() {
    return reinterpret_cast<const JobPodSpec*>(
               &_JobPodSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(JobPodSpec* other);
  friend void swap(JobPodSpec& a, JobPodSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobPodSpec* New() const final {
    return CreateMaybeMessage<JobPodSpec>(nullptr);
  }

  JobPodSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JobPodSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JobPodSpec& from);
  void MergeFrom(const JobPodSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobPodSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // .flyteidl.core.Resources resources = 2;
  bool has_resources() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 2;
  const ::flyteidl::core::Resources& resources() const;
  ::flyteidl::core::Resources* release_resources();
  ::flyteidl::core::Resources* mutable_resources();
  void set_allocated_resources(::flyteidl::core::Resources* resources);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.JobPodSpec)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::flyteidl::core::Resources* resources_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fdask_2eproto;
};
// -------------------------------------------------------------------

class DaskCluster final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.DaskCluster) */ {
 public:
  DaskCluster();
  virtual ~DaskCluster();

  DaskCluster(const DaskCluster& from);

  inline DaskCluster& operator=(const DaskCluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DaskCluster(DaskCluster&& from) noexcept
    : DaskCluster() {
    *this = ::std::move(from);
  }

  inline DaskCluster& operator=(DaskCluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DaskCluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DaskCluster* internal_default_instance() {
    return reinterpret_cast<const DaskCluster*>(
               &_DaskCluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DaskCluster* other);
  friend void swap(DaskCluster& a, DaskCluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DaskCluster* New() const final {
    return CreateMaybeMessage<DaskCluster>(nullptr);
  }

  DaskCluster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DaskCluster>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DaskCluster& from);
  void MergeFrom(const DaskCluster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaskCluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // .flyteidl.core.Resources resources = 3;
  bool has_resources() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 3;
  const ::flyteidl::core::Resources& resources() const;
  ::flyteidl::core::Resources* release_resources();
  ::flyteidl::core::Resources* mutable_resources();
  void set_allocated_resources(::flyteidl::core::Resources* resources);

  // int32 nWorkers = 2;
  void clear_nworkers();
  static const int kNWorkersFieldNumber = 2;
  ::google::protobuf::int32 nworkers() const;
  void set_nworkers(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.DaskCluster)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::flyteidl::core::Resources* resources_;
  ::google::protobuf::int32 nworkers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fdask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DaskJob

// .flyteidl.plugins.JobPodSpec jobPodSpec = 1;
inline bool DaskJob::has_jobpodspec() const {
  return this != internal_default_instance() && jobpodspec_ != nullptr;
}
inline void DaskJob::clear_jobpodspec() {
  if (GetArenaNoVirtual() == nullptr && jobpodspec_ != nullptr) {
    delete jobpodspec_;
  }
  jobpodspec_ = nullptr;
}
inline const ::flyteidl::plugins::JobPodSpec& DaskJob::jobpodspec() const {
  const ::flyteidl::plugins::JobPodSpec* p = jobpodspec_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskJob.jobPodSpec)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::JobPodSpec*>(
      &::flyteidl::plugins::_JobPodSpec_default_instance_);
}
inline ::flyteidl::plugins::JobPodSpec* DaskJob::release_jobpodspec() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DaskJob.jobPodSpec)
  
  ::flyteidl::plugins::JobPodSpec* temp = jobpodspec_;
  jobpodspec_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::JobPodSpec* DaskJob::mutable_jobpodspec() {
  
  if (jobpodspec_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::JobPodSpec>(GetArenaNoVirtual());
    jobpodspec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DaskJob.jobPodSpec)
  return jobpodspec_;
}
inline void DaskJob::set_allocated_jobpodspec(::flyteidl::plugins::JobPodSpec* jobpodspec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete jobpodspec_;
  }
  if (jobpodspec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      jobpodspec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, jobpodspec, submessage_arena);
    }
    
  } else {
    
  }
  jobpodspec_ = jobpodspec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DaskJob.jobPodSpec)
}

// .flyteidl.plugins.DaskCluster cluster = 2;
inline bool DaskJob::has_cluster() const {
  return this != internal_default_instance() && cluster_ != nullptr;
}
inline void DaskJob::clear_cluster() {
  if (GetArenaNoVirtual() == nullptr && cluster_ != nullptr) {
    delete cluster_;
  }
  cluster_ = nullptr;
}
inline const ::flyteidl::plugins::DaskCluster& DaskJob::cluster() const {
  const ::flyteidl::plugins::DaskCluster* p = cluster_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskJob.cluster)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::DaskCluster*>(
      &::flyteidl::plugins::_DaskCluster_default_instance_);
}
inline ::flyteidl::plugins::DaskCluster* DaskJob::release_cluster() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DaskJob.cluster)
  
  ::flyteidl::plugins::DaskCluster* temp = cluster_;
  cluster_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::DaskCluster* DaskJob::mutable_cluster() {
  
  if (cluster_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::DaskCluster>(GetArenaNoVirtual());
    cluster_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DaskJob.cluster)
  return cluster_;
}
inline void DaskJob::set_allocated_cluster(::flyteidl::plugins::DaskCluster* cluster) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cluster_;
  }
  if (cluster) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cluster = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cluster, submessage_arena);
    }
    
  } else {
    
  }
  cluster_ = cluster;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DaskJob.cluster)
}

// -------------------------------------------------------------------

// JobPodSpec

// string image = 1;
inline void JobPodSpec::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobPodSpec::image() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.JobPodSpec.image)
  return image_.GetNoArena();
}
inline void JobPodSpec::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.JobPodSpec.image)
}
#if LANG_CXX11
inline void JobPodSpec::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.JobPodSpec.image)
}
#endif
inline void JobPodSpec::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.JobPodSpec.image)
}
inline void JobPodSpec::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.JobPodSpec.image)
}
inline ::std::string* JobPodSpec::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.JobPodSpec.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobPodSpec::release_image() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.JobPodSpec.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobPodSpec::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.JobPodSpec.image)
}

// .flyteidl.core.Resources resources = 2;
inline bool JobPodSpec::has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline const ::flyteidl::core::Resources& JobPodSpec::resources() const {
  const ::flyteidl::core::Resources* p = resources_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.JobPodSpec.resources)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Resources*>(
      &::flyteidl::core::_Resources_default_instance_);
}
inline ::flyteidl::core::Resources* JobPodSpec::release_resources() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.JobPodSpec.resources)
  
  ::flyteidl::core::Resources* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Resources* JobPodSpec::mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Resources>(GetArenaNoVirtual());
    resources_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.JobPodSpec.resources)
  return resources_;
}
inline void JobPodSpec::set_allocated_resources(::flyteidl::core::Resources* resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resources_);
  }
  if (resources) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resources = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.JobPodSpec.resources)
}

// -------------------------------------------------------------------

// DaskCluster

// string image = 1;
inline void DaskCluster::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DaskCluster::image() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskCluster.image)
  return image_.GetNoArena();
}
inline void DaskCluster::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.DaskCluster.image)
}
#if LANG_CXX11
inline void DaskCluster::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.DaskCluster.image)
}
#endif
inline void DaskCluster::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.DaskCluster.image)
}
inline void DaskCluster::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.DaskCluster.image)
}
inline ::std::string* DaskCluster::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DaskCluster.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DaskCluster::release_image() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DaskCluster.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DaskCluster::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DaskCluster.image)
}

// int32 nWorkers = 2;
inline void DaskCluster::clear_nworkers() {
  nworkers_ = 0;
}
inline ::google::protobuf::int32 DaskCluster::nworkers() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskCluster.nWorkers)
  return nworkers_;
}
inline void DaskCluster::set_nworkers(::google::protobuf::int32 value) {
  
  nworkers_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.DaskCluster.nWorkers)
}

// .flyteidl.core.Resources resources = 3;
inline bool DaskCluster::has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline const ::flyteidl::core::Resources& DaskCluster::resources() const {
  const ::flyteidl::core::Resources* p = resources_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskCluster.resources)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Resources*>(
      &::flyteidl::core::_Resources_default_instance_);
}
inline ::flyteidl::core::Resources* DaskCluster::release_resources() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DaskCluster.resources)
  
  ::flyteidl::core::Resources* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Resources* DaskCluster::mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Resources>(GetArenaNoVirtual());
    resources_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DaskCluster.resources)
  return resources_;
}
inline void DaskCluster::set_allocated_resources(::flyteidl::core::Resources* resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resources_);
  }
  if (resources) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resources = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DaskCluster.resources)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fplugins_2fdask_2eproto
