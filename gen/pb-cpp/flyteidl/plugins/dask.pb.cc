// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/dask.proto

#include "flyteidl/plugins/dask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fdask_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DaskAutoscaler_flyteidl_2fplugins_2fdask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fdask_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DaskWorkerGroup_flyteidl_2fplugins_2fdask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fdask_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_JobPodSpec_flyteidl_2fplugins_2fdask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fdask_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DaskCluster_flyteidl_2fplugins_2fdask_2eproto;
namespace flyteidl {
namespace plugins {
class DaskJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DaskJob> _instance;
} _DaskJob_default_instance_;
class JobPodSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JobPodSpec> _instance;
} _JobPodSpec_default_instance_;
class DaskClusterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DaskCluster> _instance;
} _DaskCluster_default_instance_;
class DaskAutoscalerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DaskAutoscaler> _instance;
} _DaskAutoscaler_default_instance_;
class DaskWorkerGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DaskWorkerGroup> _instance;
} _DaskWorkerGroup_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
static void InitDefaultsDaskJob_flyteidl_2fplugins_2fdask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_DaskJob_default_instance_;
    new (ptr) ::flyteidl::plugins::DaskJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::DaskJob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DaskJob_flyteidl_2fplugins_2fdask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDaskJob_flyteidl_2fplugins_2fdask_2eproto}, {
      &scc_info_JobPodSpec_flyteidl_2fplugins_2fdask_2eproto.base,
      &scc_info_DaskCluster_flyteidl_2fplugins_2fdask_2eproto.base,}};

static void InitDefaultsJobPodSpec_flyteidl_2fplugins_2fdask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_JobPodSpec_default_instance_;
    new (ptr) ::flyteidl::plugins::JobPodSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::JobPodSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JobPodSpec_flyteidl_2fplugins_2fdask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJobPodSpec_flyteidl_2fplugins_2fdask_2eproto}, {
      &scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto.base,}};

static void InitDefaultsDaskCluster_flyteidl_2fplugins_2fdask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_DaskCluster_default_instance_;
    new (ptr) ::flyteidl::plugins::DaskCluster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::DaskCluster::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DaskCluster_flyteidl_2fplugins_2fdask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDaskCluster_flyteidl_2fplugins_2fdask_2eproto}, {
      &scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_DaskWorkerGroup_flyteidl_2fplugins_2fdask_2eproto.base,
      &scc_info_DaskAutoscaler_flyteidl_2fplugins_2fdask_2eproto.base,}};

static void InitDefaultsDaskAutoscaler_flyteidl_2fplugins_2fdask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_DaskAutoscaler_default_instance_;
    new (ptr) ::flyteidl::plugins::DaskAutoscaler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::DaskAutoscaler::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DaskAutoscaler_flyteidl_2fplugins_2fdask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDaskAutoscaler_flyteidl_2fplugins_2fdask_2eproto}, {}};

static void InitDefaultsDaskWorkerGroup_flyteidl_2fplugins_2fdask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_DaskWorkerGroup_default_instance_;
    new (ptr) ::flyteidl::plugins::DaskWorkerGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::DaskWorkerGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DaskWorkerGroup_flyteidl_2fplugins_2fdask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDaskWorkerGroup_flyteidl_2fplugins_2fdask_2eproto}, {
      &scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto.base,}};

void InitDefaults_flyteidl_2fplugins_2fdask_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DaskJob_flyteidl_2fplugins_2fdask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JobPodSpec_flyteidl_2fplugins_2fdask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DaskCluster_flyteidl_2fplugins_2fdask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DaskAutoscaler_flyteidl_2fplugins_2fdask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DaskWorkerGroup_flyteidl_2fplugins_2fdask_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fplugins_2fdask_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2fdask_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2fdask_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fplugins_2fdask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskJob, namespace__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskJob, jobpodspec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskJob, cluster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::JobPodSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::JobPodSpec, image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::JobPodSpec, resources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskCluster, image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskCluster, nworkers_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskCluster, resources_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskCluster, additionalworkergroups_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskCluster, autoscaler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskAutoscaler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskAutoscaler, minimum_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskAutoscaler, maximum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskWorkerGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskWorkerGroup, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskWorkerGroup, image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskWorkerGroup, nworkers_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskWorkerGroup, resources_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::plugins::DaskJob)},
  { 8, -1, sizeof(::flyteidl::plugins::JobPodSpec)},
  { 15, -1, sizeof(::flyteidl::plugins::DaskCluster)},
  { 25, -1, sizeof(::flyteidl::plugins::DaskAutoscaler)},
  { 32, -1, sizeof(::flyteidl::plugins::DaskWorkerGroup)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_DaskJob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_JobPodSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_DaskCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_DaskAutoscaler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_DaskWorkerGroup_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto = {
  {}, AddDescriptors_flyteidl_2fplugins_2fdask_2eproto, "flyteidl/plugins/dask.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fplugins_2fdask_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2fdask_2eproto, 5, file_level_enum_descriptors_flyteidl_2fplugins_2fdask_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2fdask_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fplugins_2fdask_2eproto[] =
  "\n\033flyteidl/plugins/dask.proto\022\020flyteidl."
  "plugins\032\031flyteidl/core/tasks.proto\"~\n\007Da"
  "skJob\022\021\n\tnamespace\030\001 \001(\t\0220\n\njobPodSpec\030\002"
  " \001(\0132\034.flyteidl.plugins.JobPodSpec\022.\n\007cl"
  "uster\030\003 \001(\0132\035.flyteidl.plugins.DaskClust"
  "er\"H\n\nJobPodSpec\022\r\n\005image\030\001 \001(\t\022+\n\tresou"
  "rces\030\002 \001(\0132\030.flyteidl.core.Resources\"\324\001\n"
  "\013DaskCluster\022\r\n\005image\030\001 \001(\t\022\020\n\010nWorkers\030"
  "\002 \001(\005\022+\n\tresources\030\003 \001(\0132\030.flyteidl.core"
  ".Resources\022A\n\026additionalWorkerGroups\030\004 \003"
  "(\0132!.flyteidl.plugins.DaskWorkerGroup\0224\n"
  "\nautoscaler\030\005 \001(\0132 .flyteidl.plugins.Das"
  "kAutoscaler\"2\n\016DaskAutoscaler\022\017\n\007minimum"
  "\030\001 \001(\005\022\017\n\007maximum\030\002 \001(\005\"m\n\017DaskWorkerGro"
  "up\022\014\n\004name\030\001 \001(\t\022\r\n\005image\030\002 \001(\t\022\020\n\010nWork"
  "ers\030\003 \001(\005\022+\n\tresources\030\004 \001(\0132\030.flyteidl."
  "core.ResourcesB9Z7github.com/flyteorg/fl"
  "yteidl/gen/pb-go/flyteidl/pluginsb\006proto"
  "3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fdask_2eproto = {
  false, InitDefaults_flyteidl_2fplugins_2fdask_2eproto, 
  descriptor_table_protodef_flyteidl_2fplugins_2fdask_2eproto,
  "flyteidl/plugins/dask.proto", &assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto, 721,
};

void AddDescriptors_flyteidl_2fplugins_2fdask_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_flyteidl_2fcore_2ftasks_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fplugins_2fdask_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fplugins_2fdask_2eproto = []() { AddDescriptors_flyteidl_2fplugins_2fdask_2eproto(); return true; }();
namespace flyteidl {
namespace plugins {

// ===================================================================

void DaskJob::InitAsDefaultInstance() {
  ::flyteidl::plugins::_DaskJob_default_instance_._instance.get_mutable()->jobpodspec_ = const_cast< ::flyteidl::plugins::JobPodSpec*>(
      ::flyteidl::plugins::JobPodSpec::internal_default_instance());
  ::flyteidl::plugins::_DaskJob_default_instance_._instance.get_mutable()->cluster_ = const_cast< ::flyteidl::plugins::DaskCluster*>(
      ::flyteidl::plugins::DaskCluster::internal_default_instance());
}
class DaskJob::HasBitSetters {
 public:
  static const ::flyteidl::plugins::JobPodSpec& jobpodspec(const DaskJob* msg);
  static const ::flyteidl::plugins::DaskCluster& cluster(const DaskJob* msg);
};

const ::flyteidl::plugins::JobPodSpec&
DaskJob::HasBitSetters::jobpodspec(const DaskJob* msg) {
  return *msg->jobpodspec_;
}
const ::flyteidl::plugins::DaskCluster&
DaskJob::HasBitSetters::cluster(const DaskJob* msg) {
  return *msg->cluster_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DaskJob::kNamespaceFieldNumber;
const int DaskJob::kJobPodSpecFieldNumber;
const int DaskJob::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DaskJob::DaskJob()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.DaskJob)
}
DaskJob::DaskJob(const DaskJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.has_jobpodspec()) {
    jobpodspec_ = new ::flyteidl::plugins::JobPodSpec(*from.jobpodspec_);
  } else {
    jobpodspec_ = nullptr;
  }
  if (from.has_cluster()) {
    cluster_ = new ::flyteidl::plugins::DaskCluster(*from.cluster_);
  } else {
    cluster_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.DaskJob)
}

void DaskJob::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DaskJob_flyteidl_2fplugins_2fdask_2eproto.base);
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&jobpodspec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_) -
      reinterpret_cast<char*>(&jobpodspec_)) + sizeof(cluster_));
}

DaskJob::~DaskJob() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.DaskJob)
  SharedDtor();
}

void DaskJob::SharedDtor() {
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete jobpodspec_;
  if (this != internal_default_instance()) delete cluster_;
}

void DaskJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DaskJob& DaskJob::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DaskJob_flyteidl_2fplugins_2fdask_2eproto.base);
  return *internal_default_instance();
}


void DaskJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.DaskJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && jobpodspec_ != nullptr) {
    delete jobpodspec_;
  }
  jobpodspec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cluster_ != nullptr) {
    delete cluster_;
  }
  cluster_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DaskJob::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DaskJob*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string namespace = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.DaskJob.namespace");
        object = msg->mutable_namespace_();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.plugins.JobPodSpec jobPodSpec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::JobPodSpec::_InternalParse;
        object = msg->mutable_jobpodspec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.plugins.DaskCluster cluster = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::DaskCluster::_InternalParse;
        object = msg->mutable_cluster();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DaskJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.DaskJob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string namespace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.DaskJob.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.JobPodSpec jobPodSpec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_jobpodspec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.DaskCluster cluster = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.DaskJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.DaskJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DaskJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.DaskJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.DaskJob.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_(), output);
  }

  // .flyteidl.plugins.JobPodSpec jobPodSpec = 2;
  if (this->has_jobpodspec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::jobpodspec(this), output);
  }

  // .flyteidl.plugins.DaskCluster cluster = 3;
  if (this->has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::cluster(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.DaskJob)
}

::google::protobuf::uint8* DaskJob::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.DaskJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.DaskJob.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_(), target);
  }

  // .flyteidl.plugins.JobPodSpec jobPodSpec = 2;
  if (this->has_jobpodspec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::jobpodspec(this), target);
  }

  // .flyteidl.plugins.DaskCluster cluster = 3;
  if (this->has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::cluster(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.DaskJob)
  return target;
}

size_t DaskJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.DaskJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // .flyteidl.plugins.JobPodSpec jobPodSpec = 2;
  if (this->has_jobpodspec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *jobpodspec_);
  }

  // .flyteidl.plugins.DaskCluster cluster = 3;
  if (this->has_cluster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cluster_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DaskJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.DaskJob)
  GOOGLE_DCHECK_NE(&from, this);
  const DaskJob* source =
      ::google::protobuf::DynamicCastToGenerated<DaskJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.DaskJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.DaskJob)
    MergeFrom(*source);
  }
}

void DaskJob::MergeFrom(const DaskJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.DaskJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.has_jobpodspec()) {
    mutable_jobpodspec()->::flyteidl::plugins::JobPodSpec::MergeFrom(from.jobpodspec());
  }
  if (from.has_cluster()) {
    mutable_cluster()->::flyteidl::plugins::DaskCluster::MergeFrom(from.cluster());
  }
}

void DaskJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.DaskJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaskJob::CopyFrom(const DaskJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.DaskJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaskJob::IsInitialized() const {
  return true;
}

void DaskJob::Swap(DaskJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DaskJob::InternalSwap(DaskJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  namespace__.Swap(&other->namespace__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(jobpodspec_, other->jobpodspec_);
  swap(cluster_, other->cluster_);
}

::google::protobuf::Metadata DaskJob::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fdask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void JobPodSpec::InitAsDefaultInstance() {
  ::flyteidl::plugins::_JobPodSpec_default_instance_._instance.get_mutable()->resources_ = const_cast< ::flyteidl::core::Resources*>(
      ::flyteidl::core::Resources::internal_default_instance());
}
class JobPodSpec::HasBitSetters {
 public:
  static const ::flyteidl::core::Resources& resources(const JobPodSpec* msg);
};

const ::flyteidl::core::Resources&
JobPodSpec::HasBitSetters::resources(const JobPodSpec* msg) {
  return *msg->resources_;
}
void JobPodSpec::clear_resources() {
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobPodSpec::kImageFieldNumber;
const int JobPodSpec::kResourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobPodSpec::JobPodSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.JobPodSpec)
}
JobPodSpec::JobPodSpec(const JobPodSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    resources_ = new ::flyteidl::core::Resources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.JobPodSpec)
}

void JobPodSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JobPodSpec_flyteidl_2fplugins_2fdask_2eproto.base);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resources_ = nullptr;
}

JobPodSpec::~JobPodSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.JobPodSpec)
  SharedDtor();
}

void JobPodSpec::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resources_;
}

void JobPodSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobPodSpec& JobPodSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JobPodSpec_flyteidl_2fplugins_2fdask_2eproto.base);
  return *internal_default_instance();
}


void JobPodSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.JobPodSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobPodSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JobPodSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.JobPodSpec.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.Resources resources = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Resources::_InternalParse;
        object = msg->mutable_resources();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobPodSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.JobPodSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.JobPodSpec.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Resources resources = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.JobPodSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.JobPodSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobPodSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.JobPodSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.JobPodSpec.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image(), output);
  }

  // .flyteidl.core.Resources resources = 2;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::resources(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.JobPodSpec)
}

::google::protobuf::uint8* JobPodSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.JobPodSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.JobPodSpec.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // .flyteidl.core.Resources resources = 2;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::resources(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.JobPodSpec)
  return target;
}

size_t JobPodSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.JobPodSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // .flyteidl.core.Resources resources = 2;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobPodSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.JobPodSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const JobPodSpec* source =
      ::google::protobuf::DynamicCastToGenerated<JobPodSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.JobPodSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.JobPodSpec)
    MergeFrom(*source);
  }
}

void JobPodSpec::MergeFrom(const JobPodSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.JobPodSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    mutable_resources()->::flyteidl::core::Resources::MergeFrom(from.resources());
  }
}

void JobPodSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.JobPodSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobPodSpec::CopyFrom(const JobPodSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.JobPodSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobPodSpec::IsInitialized() const {
  return true;
}

void JobPodSpec::Swap(JobPodSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobPodSpec::InternalSwap(JobPodSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resources_, other->resources_);
}

::google::protobuf::Metadata JobPodSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fdask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DaskCluster::InitAsDefaultInstance() {
  ::flyteidl::plugins::_DaskCluster_default_instance_._instance.get_mutable()->resources_ = const_cast< ::flyteidl::core::Resources*>(
      ::flyteidl::core::Resources::internal_default_instance());
  ::flyteidl::plugins::_DaskCluster_default_instance_._instance.get_mutable()->autoscaler_ = const_cast< ::flyteidl::plugins::DaskAutoscaler*>(
      ::flyteidl::plugins::DaskAutoscaler::internal_default_instance());
}
class DaskCluster::HasBitSetters {
 public:
  static const ::flyteidl::core::Resources& resources(const DaskCluster* msg);
  static const ::flyteidl::plugins::DaskAutoscaler& autoscaler(const DaskCluster* msg);
};

const ::flyteidl::core::Resources&
DaskCluster::HasBitSetters::resources(const DaskCluster* msg) {
  return *msg->resources_;
}
const ::flyteidl::plugins::DaskAutoscaler&
DaskCluster::HasBitSetters::autoscaler(const DaskCluster* msg) {
  return *msg->autoscaler_;
}
void DaskCluster::clear_resources() {
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DaskCluster::kImageFieldNumber;
const int DaskCluster::kNWorkersFieldNumber;
const int DaskCluster::kResourcesFieldNumber;
const int DaskCluster::kAdditionalWorkerGroupsFieldNumber;
const int DaskCluster::kAutoscalerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DaskCluster::DaskCluster()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.DaskCluster)
}
DaskCluster::DaskCluster(const DaskCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      additionalworkergroups_(from.additionalworkergroups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    resources_ = new ::flyteidl::core::Resources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  if (from.has_autoscaler()) {
    autoscaler_ = new ::flyteidl::plugins::DaskAutoscaler(*from.autoscaler_);
  } else {
    autoscaler_ = nullptr;
  }
  nworkers_ = from.nworkers_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.DaskCluster)
}

void DaskCluster::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DaskCluster_flyteidl_2fplugins_2fdask_2eproto.base);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nworkers_) -
      reinterpret_cast<char*>(&resources_)) + sizeof(nworkers_));
}

DaskCluster::~DaskCluster() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.DaskCluster)
  SharedDtor();
}

void DaskCluster::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resources_;
  if (this != internal_default_instance()) delete autoscaler_;
}

void DaskCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DaskCluster& DaskCluster::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DaskCluster_flyteidl_2fplugins_2fdask_2eproto.base);
  return *internal_default_instance();
}


void DaskCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.DaskCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additionalworkergroups_.Clear();
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && autoscaler_ != nullptr) {
    delete autoscaler_;
  }
  autoscaler_ = nullptr;
  nworkers_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DaskCluster::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DaskCluster*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.DaskCluster.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 nWorkers = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nworkers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.Resources resources = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Resources::_InternalParse;
        object = msg->mutable_resources();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.plugins.DaskWorkerGroup additionalWorkerGroups = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::plugins::DaskWorkerGroup::_InternalParse;
          object = msg->add_additionalworkergroups();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .flyteidl.plugins.DaskAutoscaler autoscaler = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::DaskAutoscaler::_InternalParse;
        object = msg->mutable_autoscaler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DaskCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.DaskCluster)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.DaskCluster.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nWorkers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nworkers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Resources resources = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.plugins.DaskWorkerGroup additionalWorkerGroups = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additionalworkergroups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.DaskAutoscaler autoscaler = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_autoscaler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.DaskCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.DaskCluster)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DaskCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.DaskCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.DaskCluster.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image(), output);
  }

  // int32 nWorkers = 2;
  if (this->nworkers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nworkers(), output);
  }

  // .flyteidl.core.Resources resources = 3;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::resources(this), output);
  }

  // repeated .flyteidl.plugins.DaskWorkerGroup additionalWorkerGroups = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additionalworkergroups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->additionalworkergroups(static_cast<int>(i)),
      output);
  }

  // .flyteidl.plugins.DaskAutoscaler autoscaler = 5;
  if (this->has_autoscaler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::autoscaler(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.DaskCluster)
}

::google::protobuf::uint8* DaskCluster::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.DaskCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.DaskCluster.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // int32 nWorkers = 2;
  if (this->nworkers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nworkers(), target);
  }

  // .flyteidl.core.Resources resources = 3;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::resources(this), target);
  }

  // repeated .flyteidl.plugins.DaskWorkerGroup additionalWorkerGroups = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additionalworkergroups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->additionalworkergroups(static_cast<int>(i)), target);
  }

  // .flyteidl.plugins.DaskAutoscaler autoscaler = 5;
  if (this->has_autoscaler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::autoscaler(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.DaskCluster)
  return target;
}

size_t DaskCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.DaskCluster)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.plugins.DaskWorkerGroup additionalWorkerGroups = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->additionalworkergroups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additionalworkergroups(static_cast<int>(i)));
    }
  }

  // string image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // .flyteidl.core.Resources resources = 3;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // .flyteidl.plugins.DaskAutoscaler autoscaler = 5;
  if (this->has_autoscaler()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *autoscaler_);
  }

  // int32 nWorkers = 2;
  if (this->nworkers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nworkers());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DaskCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.DaskCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const DaskCluster* source =
      ::google::protobuf::DynamicCastToGenerated<DaskCluster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.DaskCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.DaskCluster)
    MergeFrom(*source);
  }
}

void DaskCluster::MergeFrom(const DaskCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.DaskCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additionalworkergroups_.MergeFrom(from.additionalworkergroups_);
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    mutable_resources()->::flyteidl::core::Resources::MergeFrom(from.resources());
  }
  if (from.has_autoscaler()) {
    mutable_autoscaler()->::flyteidl::plugins::DaskAutoscaler::MergeFrom(from.autoscaler());
  }
  if (from.nworkers() != 0) {
    set_nworkers(from.nworkers());
  }
}

void DaskCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.DaskCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaskCluster::CopyFrom(const DaskCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.DaskCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaskCluster::IsInitialized() const {
  return true;
}

void DaskCluster::Swap(DaskCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DaskCluster::InternalSwap(DaskCluster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&additionalworkergroups_)->InternalSwap(CastToBase(&other->additionalworkergroups_));
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resources_, other->resources_);
  swap(autoscaler_, other->autoscaler_);
  swap(nworkers_, other->nworkers_);
}

::google::protobuf::Metadata DaskCluster::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fdask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DaskAutoscaler::InitAsDefaultInstance() {
}
class DaskAutoscaler::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DaskAutoscaler::kMinimumFieldNumber;
const int DaskAutoscaler::kMaximumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DaskAutoscaler::DaskAutoscaler()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.DaskAutoscaler)
}
DaskAutoscaler::DaskAutoscaler(const DaskAutoscaler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minimum_, &from.minimum_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_) -
    reinterpret_cast<char*>(&minimum_)) + sizeof(maximum_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.DaskAutoscaler)
}

void DaskAutoscaler::SharedCtor() {
  ::memset(&minimum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_) -
      reinterpret_cast<char*>(&minimum_)) + sizeof(maximum_));
}

DaskAutoscaler::~DaskAutoscaler() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.DaskAutoscaler)
  SharedDtor();
}

void DaskAutoscaler::SharedDtor() {
}

void DaskAutoscaler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DaskAutoscaler& DaskAutoscaler::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DaskAutoscaler_flyteidl_2fplugins_2fdask_2eproto.base);
  return *internal_default_instance();
}


void DaskAutoscaler::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.DaskAutoscaler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minimum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_) -
      reinterpret_cast<char*>(&minimum_)) + sizeof(maximum_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DaskAutoscaler::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DaskAutoscaler*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 minimum = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_minimum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 maximum = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_maximum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DaskAutoscaler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.DaskAutoscaler)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 minimum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maximum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.DaskAutoscaler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.DaskAutoscaler)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DaskAutoscaler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.DaskAutoscaler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minimum = 1;
  if (this->minimum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->minimum(), output);
  }

  // int32 maximum = 2;
  if (this->maximum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maximum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.DaskAutoscaler)
}

::google::protobuf::uint8* DaskAutoscaler::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.DaskAutoscaler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minimum = 1;
  if (this->minimum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->minimum(), target);
  }

  // int32 maximum = 2;
  if (this->maximum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maximum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.DaskAutoscaler)
  return target;
}

size_t DaskAutoscaler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.DaskAutoscaler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 minimum = 1;
  if (this->minimum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minimum());
  }

  // int32 maximum = 2;
  if (this->maximum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DaskAutoscaler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.DaskAutoscaler)
  GOOGLE_DCHECK_NE(&from, this);
  const DaskAutoscaler* source =
      ::google::protobuf::DynamicCastToGenerated<DaskAutoscaler>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.DaskAutoscaler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.DaskAutoscaler)
    MergeFrom(*source);
  }
}

void DaskAutoscaler::MergeFrom(const DaskAutoscaler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.DaskAutoscaler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.minimum() != 0) {
    set_minimum(from.minimum());
  }
  if (from.maximum() != 0) {
    set_maximum(from.maximum());
  }
}

void DaskAutoscaler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.DaskAutoscaler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaskAutoscaler::CopyFrom(const DaskAutoscaler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.DaskAutoscaler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaskAutoscaler::IsInitialized() const {
  return true;
}

void DaskAutoscaler::Swap(DaskAutoscaler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DaskAutoscaler::InternalSwap(DaskAutoscaler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(minimum_, other->minimum_);
  swap(maximum_, other->maximum_);
}

::google::protobuf::Metadata DaskAutoscaler::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fdask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DaskWorkerGroup::InitAsDefaultInstance() {
  ::flyteidl::plugins::_DaskWorkerGroup_default_instance_._instance.get_mutable()->resources_ = const_cast< ::flyteidl::core::Resources*>(
      ::flyteidl::core::Resources::internal_default_instance());
}
class DaskWorkerGroup::HasBitSetters {
 public:
  static const ::flyteidl::core::Resources& resources(const DaskWorkerGroup* msg);
};

const ::flyteidl::core::Resources&
DaskWorkerGroup::HasBitSetters::resources(const DaskWorkerGroup* msg) {
  return *msg->resources_;
}
void DaskWorkerGroup::clear_resources() {
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DaskWorkerGroup::kNameFieldNumber;
const int DaskWorkerGroup::kImageFieldNumber;
const int DaskWorkerGroup::kNWorkersFieldNumber;
const int DaskWorkerGroup::kResourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DaskWorkerGroup::DaskWorkerGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.DaskWorkerGroup)
}
DaskWorkerGroup::DaskWorkerGroup(const DaskWorkerGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    resources_ = new ::flyteidl::core::Resources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  nworkers_ = from.nworkers_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.DaskWorkerGroup)
}

void DaskWorkerGroup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DaskWorkerGroup_flyteidl_2fplugins_2fdask_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nworkers_) -
      reinterpret_cast<char*>(&resources_)) + sizeof(nworkers_));
}

DaskWorkerGroup::~DaskWorkerGroup() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.DaskWorkerGroup)
  SharedDtor();
}

void DaskWorkerGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resources_;
}

void DaskWorkerGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DaskWorkerGroup& DaskWorkerGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DaskWorkerGroup_flyteidl_2fplugins_2fdask_2eproto.base);
  return *internal_default_instance();
}


void DaskWorkerGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.DaskWorkerGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  nworkers_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DaskWorkerGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DaskWorkerGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.DaskWorkerGroup.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string image = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.DaskWorkerGroup.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 nWorkers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_nworkers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.Resources resources = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Resources::_InternalParse;
        object = msg->mutable_resources();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DaskWorkerGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.DaskWorkerGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.DaskWorkerGroup.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.DaskWorkerGroup.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nWorkers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nworkers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Resources resources = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.DaskWorkerGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.DaskWorkerGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DaskWorkerGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.DaskWorkerGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.DaskWorkerGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.DaskWorkerGroup.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image(), output);
  }

  // int32 nWorkers = 3;
  if (this->nworkers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nworkers(), output);
  }

  // .flyteidl.core.Resources resources = 4;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::resources(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.DaskWorkerGroup)
}

::google::protobuf::uint8* DaskWorkerGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.DaskWorkerGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.DaskWorkerGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.DaskWorkerGroup.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image(), target);
  }

  // int32 nWorkers = 3;
  if (this->nworkers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nworkers(), target);
  }

  // .flyteidl.core.Resources resources = 4;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::resources(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.DaskWorkerGroup)
  return target;
}

size_t DaskWorkerGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.DaskWorkerGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string image = 2;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // .flyteidl.core.Resources resources = 4;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // int32 nWorkers = 3;
  if (this->nworkers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nworkers());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DaskWorkerGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.DaskWorkerGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const DaskWorkerGroup* source =
      ::google::protobuf::DynamicCastToGenerated<DaskWorkerGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.DaskWorkerGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.DaskWorkerGroup)
    MergeFrom(*source);
  }
}

void DaskWorkerGroup::MergeFrom(const DaskWorkerGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.DaskWorkerGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    mutable_resources()->::flyteidl::core::Resources::MergeFrom(from.resources());
  }
  if (from.nworkers() != 0) {
    set_nworkers(from.nworkers());
  }
}

void DaskWorkerGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.DaskWorkerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaskWorkerGroup::CopyFrom(const DaskWorkerGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.DaskWorkerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaskWorkerGroup::IsInitialized() const {
  return true;
}

void DaskWorkerGroup::Swap(DaskWorkerGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DaskWorkerGroup::InternalSwap(DaskWorkerGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resources_, other->resources_);
  swap(nworkers_, other->nworkers_);
}

::google::protobuf::Metadata DaskWorkerGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fdask_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::DaskJob* Arena::CreateMaybeMessage< ::flyteidl::plugins::DaskJob >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::DaskJob >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::JobPodSpec* Arena::CreateMaybeMessage< ::flyteidl::plugins::JobPodSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::JobPodSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::DaskCluster* Arena::CreateMaybeMessage< ::flyteidl::plugins::DaskCluster >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::DaskCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::DaskAutoscaler* Arena::CreateMaybeMessage< ::flyteidl::plugins::DaskAutoscaler >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::DaskAutoscaler >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::DaskWorkerGroup* Arena::CreateMaybeMessage< ::flyteidl::plugins::DaskWorkerGroup >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::DaskWorkerGroup >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
