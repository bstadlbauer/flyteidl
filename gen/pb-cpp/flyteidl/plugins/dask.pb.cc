// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/dask.proto

#include "flyteidl/plugins/dask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fdask_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Scheduler_flyteidl_2fplugins_2fdask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fdask_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WorkerGroup_flyteidl_2fplugins_2fdask_2eproto;
namespace flyteidl {
namespace plugins {
class DaskJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DaskJob> _instance;
} _DaskJob_default_instance_;
class SchedulerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scheduler> _instance;
} _Scheduler_default_instance_;
class WorkerGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkerGroup> _instance;
} _WorkerGroup_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
static void InitDefaultsDaskJob_flyteidl_2fplugins_2fdask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_DaskJob_default_instance_;
    new (ptr) ::flyteidl::plugins::DaskJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::DaskJob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DaskJob_flyteidl_2fplugins_2fdask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDaskJob_flyteidl_2fplugins_2fdask_2eproto}, {
      &scc_info_Scheduler_flyteidl_2fplugins_2fdask_2eproto.base,
      &scc_info_WorkerGroup_flyteidl_2fplugins_2fdask_2eproto.base,}};

static void InitDefaultsScheduler_flyteidl_2fplugins_2fdask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_Scheduler_default_instance_;
    new (ptr) ::flyteidl::plugins::Scheduler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::Scheduler::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Scheduler_flyteidl_2fplugins_2fdask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScheduler_flyteidl_2fplugins_2fdask_2eproto}, {
      &scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto.base,}};

static void InitDefaultsWorkerGroup_flyteidl_2fplugins_2fdask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_WorkerGroup_default_instance_;
    new (ptr) ::flyteidl::plugins::WorkerGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::WorkerGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkerGroup_flyteidl_2fplugins_2fdask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkerGroup_flyteidl_2fplugins_2fdask_2eproto}, {
      &scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto.base,}};

void InitDefaults_flyteidl_2fplugins_2fdask_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DaskJob_flyteidl_2fplugins_2fdask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scheduler_flyteidl_2fplugins_2fdask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkerGroup_flyteidl_2fplugins_2fdask_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fplugins_2fdask_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2fdask_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2fdask_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fplugins_2fdask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskJob, scheduler_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DaskJob, workers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::Scheduler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::Scheduler, image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::Scheduler, resources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::WorkerGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::WorkerGroup, number_of_workers_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::WorkerGroup, image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::WorkerGroup, resources_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::plugins::DaskJob)},
  { 7, -1, sizeof(::flyteidl::plugins::Scheduler)},
  { 14, -1, sizeof(::flyteidl::plugins::WorkerGroup)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_DaskJob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_Scheduler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_WorkerGroup_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto = {
  {}, AddDescriptors_flyteidl_2fplugins_2fdask_2eproto, "flyteidl/plugins/dask.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fplugins_2fdask_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2fdask_2eproto, 3, file_level_enum_descriptors_flyteidl_2fplugins_2fdask_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2fdask_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fplugins_2fdask_2eproto[] =
  "\n\033flyteidl/plugins/dask.proto\022\020flyteidl."
  "plugins\032\031flyteidl/core/tasks.proto\"i\n\007Da"
  "skJob\022.\n\tscheduler\030\001 \001(\0132\033.flyteidl.plug"
  "ins.Scheduler\022.\n\007workers\030\002 \001(\0132\035.flyteid"
  "l.plugins.WorkerGroup\"G\n\tScheduler\022\r\n\005im"
  "age\030\001 \001(\t\022+\n\tresources\030\002 \001(\0132\030.flyteidl."
  "core.Resources\"d\n\013WorkerGroup\022\031\n\021number_"
  "of_workers\030\001 \001(\r\022\r\n\005image\030\002 \001(\t\022+\n\tresou"
  "rces\030\003 \001(\0132\030.flyteidl.core.ResourcesB9Z7"
  "github.com/flyteorg/flyteidl/gen/pb-go/f"
  "lyteidl/pluginsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fdask_2eproto = {
  false, InitDefaults_flyteidl_2fplugins_2fdask_2eproto, 
  descriptor_table_protodef_flyteidl_2fplugins_2fdask_2eproto,
  "flyteidl/plugins/dask.proto", &assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto, 423,
};

void AddDescriptors_flyteidl_2fplugins_2fdask_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_flyteidl_2fcore_2ftasks_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fplugins_2fdask_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fplugins_2fdask_2eproto = []() { AddDescriptors_flyteidl_2fplugins_2fdask_2eproto(); return true; }();
namespace flyteidl {
namespace plugins {

// ===================================================================

void DaskJob::InitAsDefaultInstance() {
  ::flyteidl::plugins::_DaskJob_default_instance_._instance.get_mutable()->scheduler_ = const_cast< ::flyteidl::plugins::Scheduler*>(
      ::flyteidl::plugins::Scheduler::internal_default_instance());
  ::flyteidl::plugins::_DaskJob_default_instance_._instance.get_mutable()->workers_ = const_cast< ::flyteidl::plugins::WorkerGroup*>(
      ::flyteidl::plugins::WorkerGroup::internal_default_instance());
}
class DaskJob::HasBitSetters {
 public:
  static const ::flyteidl::plugins::Scheduler& scheduler(const DaskJob* msg);
  static const ::flyteidl::plugins::WorkerGroup& workers(const DaskJob* msg);
};

const ::flyteidl::plugins::Scheduler&
DaskJob::HasBitSetters::scheduler(const DaskJob* msg) {
  return *msg->scheduler_;
}
const ::flyteidl::plugins::WorkerGroup&
DaskJob::HasBitSetters::workers(const DaskJob* msg) {
  return *msg->workers_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DaskJob::kSchedulerFieldNumber;
const int DaskJob::kWorkersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DaskJob::DaskJob()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.DaskJob)
}
DaskJob::DaskJob(const DaskJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scheduler()) {
    scheduler_ = new ::flyteidl::plugins::Scheduler(*from.scheduler_);
  } else {
    scheduler_ = nullptr;
  }
  if (from.has_workers()) {
    workers_ = new ::flyteidl::plugins::WorkerGroup(*from.workers_);
  } else {
    workers_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.DaskJob)
}

void DaskJob::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DaskJob_flyteidl_2fplugins_2fdask_2eproto.base);
  ::memset(&scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workers_) -
      reinterpret_cast<char*>(&scheduler_)) + sizeof(workers_));
}

DaskJob::~DaskJob() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.DaskJob)
  SharedDtor();
}

void DaskJob::SharedDtor() {
  if (this != internal_default_instance()) delete scheduler_;
  if (this != internal_default_instance()) delete workers_;
}

void DaskJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DaskJob& DaskJob::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DaskJob_flyteidl_2fplugins_2fdask_2eproto.base);
  return *internal_default_instance();
}


void DaskJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.DaskJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && scheduler_ != nullptr) {
    delete scheduler_;
  }
  scheduler_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && workers_ != nullptr) {
    delete workers_;
  }
  workers_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DaskJob::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DaskJob*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.plugins.Scheduler scheduler = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::Scheduler::_InternalParse;
        object = msg->mutable_scheduler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.plugins.WorkerGroup workers = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::WorkerGroup::_InternalParse;
        object = msg->mutable_workers();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DaskJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.DaskJob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.plugins.Scheduler scheduler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.WorkerGroup workers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.DaskJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.DaskJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DaskJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.DaskJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.plugins.Scheduler scheduler = 1;
  if (this->has_scheduler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::scheduler(this), output);
  }

  // .flyteidl.plugins.WorkerGroup workers = 2;
  if (this->has_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::workers(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.DaskJob)
}

::google::protobuf::uint8* DaskJob::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.DaskJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.plugins.Scheduler scheduler = 1;
  if (this->has_scheduler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::scheduler(this), target);
  }

  // .flyteidl.plugins.WorkerGroup workers = 2;
  if (this->has_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::workers(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.DaskJob)
  return target;
}

size_t DaskJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.DaskJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.plugins.Scheduler scheduler = 1;
  if (this->has_scheduler()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scheduler_);
  }

  // .flyteidl.plugins.WorkerGroup workers = 2;
  if (this->has_workers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *workers_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DaskJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.DaskJob)
  GOOGLE_DCHECK_NE(&from, this);
  const DaskJob* source =
      ::google::protobuf::DynamicCastToGenerated<DaskJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.DaskJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.DaskJob)
    MergeFrom(*source);
  }
}

void DaskJob::MergeFrom(const DaskJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.DaskJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scheduler()) {
    mutable_scheduler()->::flyteidl::plugins::Scheduler::MergeFrom(from.scheduler());
  }
  if (from.has_workers()) {
    mutable_workers()->::flyteidl::plugins::WorkerGroup::MergeFrom(from.workers());
  }
}

void DaskJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.DaskJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaskJob::CopyFrom(const DaskJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.DaskJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaskJob::IsInitialized() const {
  return true;
}

void DaskJob::Swap(DaskJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DaskJob::InternalSwap(DaskJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scheduler_, other->scheduler_);
  swap(workers_, other->workers_);
}

::google::protobuf::Metadata DaskJob::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fdask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Scheduler::InitAsDefaultInstance() {
  ::flyteidl::plugins::_Scheduler_default_instance_._instance.get_mutable()->resources_ = const_cast< ::flyteidl::core::Resources*>(
      ::flyteidl::core::Resources::internal_default_instance());
}
class Scheduler::HasBitSetters {
 public:
  static const ::flyteidl::core::Resources& resources(const Scheduler* msg);
};

const ::flyteidl::core::Resources&
Scheduler::HasBitSetters::resources(const Scheduler* msg) {
  return *msg->resources_;
}
void Scheduler::clear_resources() {
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scheduler::kImageFieldNumber;
const int Scheduler::kResourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scheduler::Scheduler()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.Scheduler)
}
Scheduler::Scheduler(const Scheduler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    resources_ = new ::flyteidl::core::Resources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.Scheduler)
}

void Scheduler::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Scheduler_flyteidl_2fplugins_2fdask_2eproto.base);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resources_ = nullptr;
}

Scheduler::~Scheduler() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.Scheduler)
  SharedDtor();
}

void Scheduler::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resources_;
}

void Scheduler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scheduler& Scheduler::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Scheduler_flyteidl_2fplugins_2fdask_2eproto.base);
  return *internal_default_instance();
}


void Scheduler::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Scheduler::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Scheduler*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.Scheduler.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.Resources resources = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Resources::_InternalParse;
        object = msg->mutable_resources();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Scheduler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.Scheduler)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.Scheduler.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Resources resources = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.Scheduler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.Scheduler)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Scheduler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.Scheduler.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image(), output);
  }

  // .flyteidl.core.Resources resources = 2;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::resources(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.Scheduler)
}

::google::protobuf::uint8* Scheduler::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.Scheduler.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // .flyteidl.core.Resources resources = 2;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::resources(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.Scheduler)
  return target;
}

size_t Scheduler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.Scheduler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // .flyteidl.core.Resources resources = 2;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scheduler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.Scheduler)
  GOOGLE_DCHECK_NE(&from, this);
  const Scheduler* source =
      ::google::protobuf::DynamicCastToGenerated<Scheduler>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.Scheduler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.Scheduler)
    MergeFrom(*source);
  }
}

void Scheduler::MergeFrom(const Scheduler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.Scheduler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    mutable_resources()->::flyteidl::core::Resources::MergeFrom(from.resources());
  }
}

void Scheduler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.Scheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scheduler::CopyFrom(const Scheduler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.Scheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scheduler::IsInitialized() const {
  return true;
}

void Scheduler::Swap(Scheduler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scheduler::InternalSwap(Scheduler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resources_, other->resources_);
}

::google::protobuf::Metadata Scheduler::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fdask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkerGroup::InitAsDefaultInstance() {
  ::flyteidl::plugins::_WorkerGroup_default_instance_._instance.get_mutable()->resources_ = const_cast< ::flyteidl::core::Resources*>(
      ::flyteidl::core::Resources::internal_default_instance());
}
class WorkerGroup::HasBitSetters {
 public:
  static const ::flyteidl::core::Resources& resources(const WorkerGroup* msg);
};

const ::flyteidl::core::Resources&
WorkerGroup::HasBitSetters::resources(const WorkerGroup* msg) {
  return *msg->resources_;
}
void WorkerGroup::clear_resources() {
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkerGroup::kNumberOfWorkersFieldNumber;
const int WorkerGroup::kImageFieldNumber;
const int WorkerGroup::kResourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkerGroup::WorkerGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.WorkerGroup)
}
WorkerGroup::WorkerGroup(const WorkerGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    resources_ = new ::flyteidl::core::Resources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  number_of_workers_ = from.number_of_workers_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.WorkerGroup)
}

void WorkerGroup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkerGroup_flyteidl_2fplugins_2fdask_2eproto.base);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_workers_) -
      reinterpret_cast<char*>(&resources_)) + sizeof(number_of_workers_));
}

WorkerGroup::~WorkerGroup() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.WorkerGroup)
  SharedDtor();
}

void WorkerGroup::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resources_;
}

void WorkerGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerGroup& WorkerGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkerGroup_flyteidl_2fplugins_2fdask_2eproto.base);
  return *internal_default_instance();
}


void WorkerGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.WorkerGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  number_of_workers_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkerGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkerGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 number_of_workers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_number_of_workers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string image = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.WorkerGroup.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.Resources resources = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Resources::_InternalParse;
        object = msg->mutable_resources();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkerGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.WorkerGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number_of_workers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_workers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.WorkerGroup.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Resources resources = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.WorkerGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.WorkerGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkerGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.WorkerGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number_of_workers = 1;
  if (this->number_of_workers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number_of_workers(), output);
  }

  // string image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.WorkerGroup.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image(), output);
  }

  // .flyteidl.core.Resources resources = 3;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::resources(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.WorkerGroup)
}

::google::protobuf::uint8* WorkerGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.WorkerGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number_of_workers = 1;
  if (this->number_of_workers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number_of_workers(), target);
  }

  // string image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.WorkerGroup.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image(), target);
  }

  // .flyteidl.core.Resources resources = 3;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::resources(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.WorkerGroup)
  return target;
}

size_t WorkerGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.WorkerGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image = 2;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // .flyteidl.core.Resources resources = 3;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // uint32 number_of_workers = 1;
  if (this->number_of_workers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_workers());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.WorkerGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerGroup* source =
      ::google::protobuf::DynamicCastToGenerated<WorkerGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.WorkerGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.WorkerGroup)
    MergeFrom(*source);
  }
}

void WorkerGroup::MergeFrom(const WorkerGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.WorkerGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    mutable_resources()->::flyteidl::core::Resources::MergeFrom(from.resources());
  }
  if (from.number_of_workers() != 0) {
    set_number_of_workers(from.number_of_workers());
  }
}

void WorkerGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.WorkerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerGroup::CopyFrom(const WorkerGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.WorkerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerGroup::IsInitialized() const {
  return true;
}

void WorkerGroup::Swap(WorkerGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkerGroup::InternalSwap(WorkerGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resources_, other->resources_);
  swap(number_of_workers_, other->number_of_workers_);
}

::google::protobuf::Metadata WorkerGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fdask_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fdask_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::DaskJob* Arena::CreateMaybeMessage< ::flyteidl::plugins::DaskJob >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::DaskJob >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::Scheduler* Arena::CreateMaybeMessage< ::flyteidl::plugins::Scheduler >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::Scheduler >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::WorkerGroup* Arena::CreateMaybeMessage< ::flyteidl::plugins::WorkerGroup >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::WorkerGroup >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
